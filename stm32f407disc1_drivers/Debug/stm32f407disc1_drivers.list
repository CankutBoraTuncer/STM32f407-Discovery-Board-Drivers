
stm32f407disc1_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022cc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800247c  0800247c  0001247c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002524  08002524  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002524  08002524  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002524  08002524  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002524  08002524  00012524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002528  08002528  00012528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800252c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000054  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000bc  200000bc  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001e47  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000762  00000000  00000000  00021edf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000258  00000000  00000000  00022648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000200  00000000  00000000  000228a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000039ec  00000000  00000000  00022aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000028c2  00000000  00000000  0002648c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000fbcc  00000000  00000000  00028d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003891a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000107c  00000000  00000000  0003896c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002464 	.word	0x08002464

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08002464 	.word	0x08002464

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <GPIO_PCLKControl>:
 * @return						- none
 *
 * @Note						- none
 *
 */
void GPIO_PCLKControl(GPIOx_Configuration_t *pGPIOx, uint8_t status){
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	460b      	mov	r3, r1
 800029a:	70fb      	strb	r3, [r7, #3]
	if(status == ENABLE){
 800029c:	78fb      	ldrb	r3, [r7, #3]
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d178      	bne.n	8000394 <GPIO_PCLKControl+0x104>
		if(pGPIOx==DISC_GPIOA){
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4a7a      	ldr	r2, [pc, #488]	; (8000490 <GPIO_PCLKControl+0x200>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d106      	bne.n	80002b8 <GPIO_PCLKControl+0x28>
			DISC_GPIOA_PCLK_EN();
 80002aa:	4b7a      	ldr	r3, [pc, #488]	; (8000494 <GPIO_PCLKControl+0x204>)
 80002ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ae:	4a79      	ldr	r2, [pc, #484]	; (8000494 <GPIO_PCLKControl+0x204>)
 80002b0:	f043 0301 	orr.w	r3, r3, #1
 80002b4:	6313      	str	r3, [r2, #48]	; 0x30
		}
		else if(pGPIOx==DISC_GPIOK){
			DISC_GPIOK_PCLK_DIS();
		}
	}
}
 80002b6:	e0e5      	b.n	8000484 <GPIO_PCLKControl+0x1f4>
		else if(pGPIOx==DISC_GPIOB){
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	4a77      	ldr	r2, [pc, #476]	; (8000498 <GPIO_PCLKControl+0x208>)
 80002bc:	4293      	cmp	r3, r2
 80002be:	d106      	bne.n	80002ce <GPIO_PCLKControl+0x3e>
			DISC_GPIOB_PCLK_EN();
 80002c0:	4b74      	ldr	r3, [pc, #464]	; (8000494 <GPIO_PCLKControl+0x204>)
 80002c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c4:	4a73      	ldr	r2, [pc, #460]	; (8000494 <GPIO_PCLKControl+0x204>)
 80002c6:	f043 0302 	orr.w	r3, r3, #2
 80002ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002cc:	e0da      	b.n	8000484 <GPIO_PCLKControl+0x1f4>
		else if(pGPIOx==DISC_GPIOC){
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	4a72      	ldr	r2, [pc, #456]	; (800049c <GPIO_PCLKControl+0x20c>)
 80002d2:	4293      	cmp	r3, r2
 80002d4:	d106      	bne.n	80002e4 <GPIO_PCLKControl+0x54>
			DISC_GPIOC_PCLK_EN();
 80002d6:	4b6f      	ldr	r3, [pc, #444]	; (8000494 <GPIO_PCLKControl+0x204>)
 80002d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002da:	4a6e      	ldr	r2, [pc, #440]	; (8000494 <GPIO_PCLKControl+0x204>)
 80002dc:	f043 0304 	orr.w	r3, r3, #4
 80002e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002e2:	e0cf      	b.n	8000484 <GPIO_PCLKControl+0x1f4>
		else if(pGPIOx==DISC_GPIOD){
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	4a6e      	ldr	r2, [pc, #440]	; (80004a0 <GPIO_PCLKControl+0x210>)
 80002e8:	4293      	cmp	r3, r2
 80002ea:	d106      	bne.n	80002fa <GPIO_PCLKControl+0x6a>
			DISC_GPIOD_PCLK_EN();
 80002ec:	4b69      	ldr	r3, [pc, #420]	; (8000494 <GPIO_PCLKControl+0x204>)
 80002ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f0:	4a68      	ldr	r2, [pc, #416]	; (8000494 <GPIO_PCLKControl+0x204>)
 80002f2:	f043 0308 	orr.w	r3, r3, #8
 80002f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f8:	e0c4      	b.n	8000484 <GPIO_PCLKControl+0x1f4>
		else if(pGPIOx==DISC_GPIOE){
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	4a69      	ldr	r2, [pc, #420]	; (80004a4 <GPIO_PCLKControl+0x214>)
 80002fe:	4293      	cmp	r3, r2
 8000300:	d106      	bne.n	8000310 <GPIO_PCLKControl+0x80>
			DISC_GPIOE_PCLK_EN();
 8000302:	4b64      	ldr	r3, [pc, #400]	; (8000494 <GPIO_PCLKControl+0x204>)
 8000304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000306:	4a63      	ldr	r2, [pc, #396]	; (8000494 <GPIO_PCLKControl+0x204>)
 8000308:	f043 0310 	orr.w	r3, r3, #16
 800030c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800030e:	e0b9      	b.n	8000484 <GPIO_PCLKControl+0x1f4>
		else if(pGPIOx==DISC_GPIOF){
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	4a65      	ldr	r2, [pc, #404]	; (80004a8 <GPIO_PCLKControl+0x218>)
 8000314:	4293      	cmp	r3, r2
 8000316:	d106      	bne.n	8000326 <GPIO_PCLKControl+0x96>
			DISC_GPIOF_PCLK_EN();
 8000318:	4b5e      	ldr	r3, [pc, #376]	; (8000494 <GPIO_PCLKControl+0x204>)
 800031a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031c:	4a5d      	ldr	r2, [pc, #372]	; (8000494 <GPIO_PCLKControl+0x204>)
 800031e:	f043 0320 	orr.w	r3, r3, #32
 8000322:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000324:	e0ae      	b.n	8000484 <GPIO_PCLKControl+0x1f4>
		else if(pGPIOx==DISC_GPIOG){
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	4a60      	ldr	r2, [pc, #384]	; (80004ac <GPIO_PCLKControl+0x21c>)
 800032a:	4293      	cmp	r3, r2
 800032c:	d106      	bne.n	800033c <GPIO_PCLKControl+0xac>
			DISC_GPIOG_PCLK_EN();
 800032e:	4b59      	ldr	r3, [pc, #356]	; (8000494 <GPIO_PCLKControl+0x204>)
 8000330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000332:	4a58      	ldr	r2, [pc, #352]	; (8000494 <GPIO_PCLKControl+0x204>)
 8000334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000338:	6313      	str	r3, [r2, #48]	; 0x30
}
 800033a:	e0a3      	b.n	8000484 <GPIO_PCLKControl+0x1f4>
		else if(pGPIOx==DISC_GPIOH){
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	4a5c      	ldr	r2, [pc, #368]	; (80004b0 <GPIO_PCLKControl+0x220>)
 8000340:	4293      	cmp	r3, r2
 8000342:	d106      	bne.n	8000352 <GPIO_PCLKControl+0xc2>
			DISC_GPIOH_PCLK_EN();
 8000344:	4b53      	ldr	r3, [pc, #332]	; (8000494 <GPIO_PCLKControl+0x204>)
 8000346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000348:	4a52      	ldr	r2, [pc, #328]	; (8000494 <GPIO_PCLKControl+0x204>)
 800034a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800034e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000350:	e098      	b.n	8000484 <GPIO_PCLKControl+0x1f4>
		else if(pGPIOx==DISC_GPIOI){
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4a57      	ldr	r2, [pc, #348]	; (80004b4 <GPIO_PCLKControl+0x224>)
 8000356:	4293      	cmp	r3, r2
 8000358:	d106      	bne.n	8000368 <GPIO_PCLKControl+0xd8>
			DISC_GPIOI_PCLK_EN();
 800035a:	4b4e      	ldr	r3, [pc, #312]	; (8000494 <GPIO_PCLKControl+0x204>)
 800035c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035e:	4a4d      	ldr	r2, [pc, #308]	; (8000494 <GPIO_PCLKControl+0x204>)
 8000360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000364:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000366:	e08d      	b.n	8000484 <GPIO_PCLKControl+0x1f4>
		else if(pGPIOx==DISC_GPIOJ){
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4a53      	ldr	r2, [pc, #332]	; (80004b8 <GPIO_PCLKControl+0x228>)
 800036c:	4293      	cmp	r3, r2
 800036e:	d106      	bne.n	800037e <GPIO_PCLKControl+0xee>
			DISC_GPIOJ_PCLK_EN();
 8000370:	4b48      	ldr	r3, [pc, #288]	; (8000494 <GPIO_PCLKControl+0x204>)
 8000372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000374:	4a47      	ldr	r2, [pc, #284]	; (8000494 <GPIO_PCLKControl+0x204>)
 8000376:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800037a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800037c:	e082      	b.n	8000484 <GPIO_PCLKControl+0x1f4>
		else if(pGPIOx==DISC_GPIOK){
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4a4e      	ldr	r2, [pc, #312]	; (80004bc <GPIO_PCLKControl+0x22c>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d17e      	bne.n	8000484 <GPIO_PCLKControl+0x1f4>
			DISC_GPIOK_PCLK_EN();
 8000386:	4b43      	ldr	r3, [pc, #268]	; (8000494 <GPIO_PCLKControl+0x204>)
 8000388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038a:	4a42      	ldr	r2, [pc, #264]	; (8000494 <GPIO_PCLKControl+0x204>)
 800038c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000390:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000392:	e077      	b.n	8000484 <GPIO_PCLKControl+0x1f4>
		if(pGPIOx==DISC_GPIOA){
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a3e      	ldr	r2, [pc, #248]	; (8000490 <GPIO_PCLKControl+0x200>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d106      	bne.n	80003aa <GPIO_PCLKControl+0x11a>
			DISC_GPIOA_PCLK_DIS();
 800039c:	4b3d      	ldr	r3, [pc, #244]	; (8000494 <GPIO_PCLKControl+0x204>)
 800039e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a0:	4a3c      	ldr	r2, [pc, #240]	; (8000494 <GPIO_PCLKControl+0x204>)
 80003a2:	f023 0301 	bic.w	r3, r3, #1
 80003a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a8:	e06c      	b.n	8000484 <GPIO_PCLKControl+0x1f4>
		else if(pGPIOx==DISC_GPIOB){
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4a3a      	ldr	r2, [pc, #232]	; (8000498 <GPIO_PCLKControl+0x208>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d106      	bne.n	80003c0 <GPIO_PCLKControl+0x130>
			DISC_GPIOB_PCLK_DIS();
 80003b2:	4b38      	ldr	r3, [pc, #224]	; (8000494 <GPIO_PCLKControl+0x204>)
 80003b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b6:	4a37      	ldr	r2, [pc, #220]	; (8000494 <GPIO_PCLKControl+0x204>)
 80003b8:	f023 0302 	bic.w	r3, r3, #2
 80003bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003be:	e061      	b.n	8000484 <GPIO_PCLKControl+0x1f4>
		else if(pGPIOx==DISC_GPIOC){
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4a36      	ldr	r2, [pc, #216]	; (800049c <GPIO_PCLKControl+0x20c>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d106      	bne.n	80003d6 <GPIO_PCLKControl+0x146>
			DISC_GPIOC_PCLK_DIS();
 80003c8:	4b32      	ldr	r3, [pc, #200]	; (8000494 <GPIO_PCLKControl+0x204>)
 80003ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003cc:	4a31      	ldr	r2, [pc, #196]	; (8000494 <GPIO_PCLKControl+0x204>)
 80003ce:	f023 0304 	bic.w	r3, r3, #4
 80003d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d4:	e056      	b.n	8000484 <GPIO_PCLKControl+0x1f4>
		else if(pGPIOx==DISC_GPIOD){
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a31      	ldr	r2, [pc, #196]	; (80004a0 <GPIO_PCLKControl+0x210>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d106      	bne.n	80003ec <GPIO_PCLKControl+0x15c>
			DISC_GPIOD_PCLK_DIS();
 80003de:	4b2d      	ldr	r3, [pc, #180]	; (8000494 <GPIO_PCLKControl+0x204>)
 80003e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e2:	4a2c      	ldr	r2, [pc, #176]	; (8000494 <GPIO_PCLKControl+0x204>)
 80003e4:	f023 0308 	bic.w	r3, r3, #8
 80003e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ea:	e04b      	b.n	8000484 <GPIO_PCLKControl+0x1f4>
		else if(pGPIOx==DISC_GPIOE){
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a2d      	ldr	r2, [pc, #180]	; (80004a4 <GPIO_PCLKControl+0x214>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d106      	bne.n	8000402 <GPIO_PCLKControl+0x172>
			DISC_GPIOE_PCLK_DIS();
 80003f4:	4b27      	ldr	r3, [pc, #156]	; (8000494 <GPIO_PCLKControl+0x204>)
 80003f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f8:	4a26      	ldr	r2, [pc, #152]	; (8000494 <GPIO_PCLKControl+0x204>)
 80003fa:	f023 0310 	bic.w	r3, r3, #16
 80003fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000400:	e040      	b.n	8000484 <GPIO_PCLKControl+0x1f4>
		else if(pGPIOx==DISC_GPIOF){
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4a28      	ldr	r2, [pc, #160]	; (80004a8 <GPIO_PCLKControl+0x218>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d106      	bne.n	8000418 <GPIO_PCLKControl+0x188>
			DISC_GPIOF_PCLK_DIS();
 800040a:	4b22      	ldr	r3, [pc, #136]	; (8000494 <GPIO_PCLKControl+0x204>)
 800040c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040e:	4a21      	ldr	r2, [pc, #132]	; (8000494 <GPIO_PCLKControl+0x204>)
 8000410:	f023 0320 	bic.w	r3, r3, #32
 8000414:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000416:	e035      	b.n	8000484 <GPIO_PCLKControl+0x1f4>
		else if(pGPIOx==DISC_GPIOG){
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4a24      	ldr	r2, [pc, #144]	; (80004ac <GPIO_PCLKControl+0x21c>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d106      	bne.n	800042e <GPIO_PCLKControl+0x19e>
			DISC_GPIOG_PCLK_DIS();
 8000420:	4b1c      	ldr	r3, [pc, #112]	; (8000494 <GPIO_PCLKControl+0x204>)
 8000422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000424:	4a1b      	ldr	r2, [pc, #108]	; (8000494 <GPIO_PCLKControl+0x204>)
 8000426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800042a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800042c:	e02a      	b.n	8000484 <GPIO_PCLKControl+0x1f4>
		else if(pGPIOx==DISC_GPIOH){
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4a1f      	ldr	r2, [pc, #124]	; (80004b0 <GPIO_PCLKControl+0x220>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d106      	bne.n	8000444 <GPIO_PCLKControl+0x1b4>
			DISC_GPIOH_PCLK_DIS();
 8000436:	4b17      	ldr	r3, [pc, #92]	; (8000494 <GPIO_PCLKControl+0x204>)
 8000438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043a:	4a16      	ldr	r2, [pc, #88]	; (8000494 <GPIO_PCLKControl+0x204>)
 800043c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000440:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000442:	e01f      	b.n	8000484 <GPIO_PCLKControl+0x1f4>
		else if(pGPIOx==DISC_GPIOI){
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	4a1b      	ldr	r2, [pc, #108]	; (80004b4 <GPIO_PCLKControl+0x224>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d106      	bne.n	800045a <GPIO_PCLKControl+0x1ca>
			DISC_GPIOI_PCLK_DIS();
 800044c:	4b11      	ldr	r3, [pc, #68]	; (8000494 <GPIO_PCLKControl+0x204>)
 800044e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000450:	4a10      	ldr	r2, [pc, #64]	; (8000494 <GPIO_PCLKControl+0x204>)
 8000452:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000456:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000458:	e014      	b.n	8000484 <GPIO_PCLKControl+0x1f4>
		else if(pGPIOx==DISC_GPIOJ){
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4a16      	ldr	r2, [pc, #88]	; (80004b8 <GPIO_PCLKControl+0x228>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d106      	bne.n	8000470 <GPIO_PCLKControl+0x1e0>
			DISC_GPIOJ_PCLK_DIS();
 8000462:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <GPIO_PCLKControl+0x204>)
 8000464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000466:	4a0b      	ldr	r2, [pc, #44]	; (8000494 <GPIO_PCLKControl+0x204>)
 8000468:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800046c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800046e:	e009      	b.n	8000484 <GPIO_PCLKControl+0x1f4>
		else if(pGPIOx==DISC_GPIOK){
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4a12      	ldr	r2, [pc, #72]	; (80004bc <GPIO_PCLKControl+0x22c>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d105      	bne.n	8000484 <GPIO_PCLKControl+0x1f4>
			DISC_GPIOK_PCLK_DIS();
 8000478:	4b06      	ldr	r3, [pc, #24]	; (8000494 <GPIO_PCLKControl+0x204>)
 800047a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047c:	4a05      	ldr	r2, [pc, #20]	; (8000494 <GPIO_PCLKControl+0x204>)
 800047e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000482:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000484:	bf00      	nop
 8000486:	370c      	adds	r7, #12
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr
 8000490:	40020000 	.word	0x40020000
 8000494:	40023800 	.word	0x40023800
 8000498:	40020400 	.word	0x40020400
 800049c:	40020800 	.word	0x40020800
 80004a0:	40020c00 	.word	0x40020c00
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40021400 	.word	0x40021400
 80004ac:	40021800 	.word	0x40021800
 80004b0:	40021c00 	.word	0x40021c00
 80004b4:	40022000 	.word	0x40022000
 80004b8:	40022400 	.word	0x40022400
 80004bc:	40022800 	.word	0x40022800

080004c0 <GPIO_Init>:
 * @return						- none
 *
 * @Note						- none
 *
 */
void GPIO_Init(GPIOx_Handle_t *pGPIOx_Handle){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	617b      	str	r3, [r7, #20]

	GPIO_PCLKControl(pGPIOx_Handle->pGPIOx, ENABLE);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2101      	movs	r1, #1
 80004d2:	4618      	mov	r0, r3
 80004d4:	f7ff fedc 	bl	8000290 <GPIO_PCLKControl>

	// configure gpio pin
	if(pGPIOx_Handle->GPIOx_PinConfig.GPIOx_PinMode <= GPIOx_PINMODE_ANALOG){
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	795b      	ldrb	r3, [r3, #5]
 80004dc:	2b03      	cmp	r3, #3
 80004de:	d813      	bhi.n	8000508 <GPIO_Init+0x48>
		//non interrupt
		temp = (pGPIOx_Handle->GPIOx_PinConfig.GPIOx_PinMode << (2 * pGPIOx_Handle->GPIOx_PinConfig.GPIOx_PinNo));
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	795b      	ldrb	r3, [r3, #5]
 80004e4:	461a      	mov	r2, r3
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	791b      	ldrb	r3, [r3, #4]
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	fa02 f303 	lsl.w	r3, r2, r3
 80004f0:	617b      	str	r3, [r7, #20]
		pGPIOx_Handle->pGPIOx->GPIO_MODER |= temp;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	6819      	ldr	r1, [r3, #0]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	697a      	ldr	r2, [r7, #20]
 80004fe:	430a      	orrs	r2, r1
 8000500:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	617b      	str	r3, [r7, #20]
 8000506:	e0e3      	b.n	80006d0 <GPIO_Init+0x210>

	}
	else{
		if(pGPIOx_Handle->GPIOx_PinConfig.GPIOx_PinMode == GPIOx_PINMODE_INT_FET){
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	795b      	ldrb	r3, [r3, #5]
 800050c:	2b04      	cmp	r3, #4
 800050e:	d117      	bne.n	8000540 <GPIO_Init+0x80>
			DISC_EXTI->EXTI_FTSR |= (1 << pGPIOx_Handle->GPIOx_PinConfig.GPIOx_PinNo);
 8000510:	4b51      	ldr	r3, [pc, #324]	; (8000658 <GPIO_Init+0x198>)
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	687a      	ldr	r2, [r7, #4]
 8000516:	7912      	ldrb	r2, [r2, #4]
 8000518:	4611      	mov	r1, r2
 800051a:	2201      	movs	r2, #1
 800051c:	408a      	lsls	r2, r1
 800051e:	4611      	mov	r1, r2
 8000520:	4a4d      	ldr	r2, [pc, #308]	; (8000658 <GPIO_Init+0x198>)
 8000522:	430b      	orrs	r3, r1
 8000524:	60d3      	str	r3, [r2, #12]
			DISC_EXTI->EXTI_RTSR &= ~(1 << pGPIOx_Handle->GPIOx_PinConfig.GPIOx_PinNo);
 8000526:	4b4c      	ldr	r3, [pc, #304]	; (8000658 <GPIO_Init+0x198>)
 8000528:	689b      	ldr	r3, [r3, #8]
 800052a:	687a      	ldr	r2, [r7, #4]
 800052c:	7912      	ldrb	r2, [r2, #4]
 800052e:	4611      	mov	r1, r2
 8000530:	2201      	movs	r2, #1
 8000532:	408a      	lsls	r2, r1
 8000534:	43d2      	mvns	r2, r2
 8000536:	4611      	mov	r1, r2
 8000538:	4a47      	ldr	r2, [pc, #284]	; (8000658 <GPIO_Init+0x198>)
 800053a:	400b      	ands	r3, r1
 800053c:	6093      	str	r3, [r2, #8]
 800053e:	e035      	b.n	80005ac <GPIO_Init+0xec>
		}
		else if(pGPIOx_Handle->GPIOx_PinConfig.GPIOx_PinMode == GPIOx_PINMODE_INT_RET){
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	795b      	ldrb	r3, [r3, #5]
 8000544:	2b05      	cmp	r3, #5
 8000546:	d117      	bne.n	8000578 <GPIO_Init+0xb8>
			DISC_EXTI->EXTI_FTSR &= ~(1 << pGPIOx_Handle->GPIOx_PinConfig.GPIOx_PinNo);
 8000548:	4b43      	ldr	r3, [pc, #268]	; (8000658 <GPIO_Init+0x198>)
 800054a:	68db      	ldr	r3, [r3, #12]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	7912      	ldrb	r2, [r2, #4]
 8000550:	4611      	mov	r1, r2
 8000552:	2201      	movs	r2, #1
 8000554:	408a      	lsls	r2, r1
 8000556:	43d2      	mvns	r2, r2
 8000558:	4611      	mov	r1, r2
 800055a:	4a3f      	ldr	r2, [pc, #252]	; (8000658 <GPIO_Init+0x198>)
 800055c:	400b      	ands	r3, r1
 800055e:	60d3      	str	r3, [r2, #12]
			DISC_EXTI->EXTI_RTSR |= (1 << pGPIOx_Handle->GPIOx_PinConfig.GPIOx_PinNo);
 8000560:	4b3d      	ldr	r3, [pc, #244]	; (8000658 <GPIO_Init+0x198>)
 8000562:	689b      	ldr	r3, [r3, #8]
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	7912      	ldrb	r2, [r2, #4]
 8000568:	4611      	mov	r1, r2
 800056a:	2201      	movs	r2, #1
 800056c:	408a      	lsls	r2, r1
 800056e:	4611      	mov	r1, r2
 8000570:	4a39      	ldr	r2, [pc, #228]	; (8000658 <GPIO_Init+0x198>)
 8000572:	430b      	orrs	r3, r1
 8000574:	6093      	str	r3, [r2, #8]
 8000576:	e019      	b.n	80005ac <GPIO_Init+0xec>
		}
		else if(pGPIOx_Handle->GPIOx_PinConfig.GPIOx_PinMode == GPIOx_PINMODE_INT_REFET){
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	795b      	ldrb	r3, [r3, #5]
 800057c:	2b06      	cmp	r3, #6
 800057e:	d115      	bne.n	80005ac <GPIO_Init+0xec>
			DISC_EXTI->EXTI_FTSR |= (1 << pGPIOx_Handle->GPIOx_PinConfig.GPIOx_PinNo);
 8000580:	4b35      	ldr	r3, [pc, #212]	; (8000658 <GPIO_Init+0x198>)
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	7912      	ldrb	r2, [r2, #4]
 8000588:	4611      	mov	r1, r2
 800058a:	2201      	movs	r2, #1
 800058c:	408a      	lsls	r2, r1
 800058e:	4611      	mov	r1, r2
 8000590:	4a31      	ldr	r2, [pc, #196]	; (8000658 <GPIO_Init+0x198>)
 8000592:	430b      	orrs	r3, r1
 8000594:	60d3      	str	r3, [r2, #12]
			DISC_EXTI->EXTI_RTSR |= (1 << pGPIOx_Handle->GPIOx_PinConfig.GPIOx_PinNo);
 8000596:	4b30      	ldr	r3, [pc, #192]	; (8000658 <GPIO_Init+0x198>)
 8000598:	689b      	ldr	r3, [r3, #8]
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	7912      	ldrb	r2, [r2, #4]
 800059e:	4611      	mov	r1, r2
 80005a0:	2201      	movs	r2, #1
 80005a2:	408a      	lsls	r2, r1
 80005a4:	4611      	mov	r1, r2
 80005a6:	4a2c      	ldr	r2, [pc, #176]	; (8000658 <GPIO_Init+0x198>)
 80005a8:	430b      	orrs	r3, r1
 80005aa:	6093      	str	r3, [r2, #8]
		}

			uint8_t temp1 = pGPIOx_Handle->GPIOx_PinConfig.GPIOx_PinNo / 4;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	791b      	ldrb	r3, [r3, #4]
 80005b0:	089b      	lsrs	r3, r3, #2
 80005b2:	74fb      	strb	r3, [r7, #19]
			uint8_t temp2 = pGPIOx_Handle->GPIOx_PinConfig.GPIOx_PinNo % 4;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	791b      	ldrb	r3, [r3, #4]
 80005b8:	f003 0303 	and.w	r3, r3, #3
 80005bc:	74bb      	strb	r3, [r7, #18]
			uint16_t temp3 = GPIO_TO_NUMBER(pGPIOx_Handle->pGPIOx);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a26      	ldr	r2, [pc, #152]	; (800065c <GPIO_Init+0x19c>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d05f      	beq.n	8000688 <GPIO_Init+0x1c8>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a24      	ldr	r2, [pc, #144]	; (8000660 <GPIO_Init+0x1a0>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d040      	beq.n	8000654 <GPIO_Init+0x194>
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a23      	ldr	r2, [pc, #140]	; (8000664 <GPIO_Init+0x1a4>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d039      	beq.n	8000650 <GPIO_Init+0x190>
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a21      	ldr	r2, [pc, #132]	; (8000668 <GPIO_Init+0x1a8>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d032      	beq.n	800064c <GPIO_Init+0x18c>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a20      	ldr	r2, [pc, #128]	; (800066c <GPIO_Init+0x1ac>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d02b      	beq.n	8000648 <GPIO_Init+0x188>
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a1e      	ldr	r2, [pc, #120]	; (8000670 <GPIO_Init+0x1b0>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d024      	beq.n	8000644 <GPIO_Init+0x184>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a1d      	ldr	r2, [pc, #116]	; (8000674 <GPIO_Init+0x1b4>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d01d      	beq.n	8000640 <GPIO_Init+0x180>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a1b      	ldr	r2, [pc, #108]	; (8000678 <GPIO_Init+0x1b8>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d016      	beq.n	800063c <GPIO_Init+0x17c>
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a1a      	ldr	r2, [pc, #104]	; (800067c <GPIO_Init+0x1bc>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d00f      	beq.n	8000638 <GPIO_Init+0x178>
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a18      	ldr	r2, [pc, #96]	; (8000680 <GPIO_Init+0x1c0>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d008      	beq.n	8000634 <GPIO_Init+0x174>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a17      	ldr	r2, [pc, #92]	; (8000684 <GPIO_Init+0x1c4>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d101      	bne.n	8000630 <GPIO_Init+0x170>
 800062c:	230a      	movs	r3, #10
 800062e:	e02c      	b.n	800068a <GPIO_Init+0x1ca>
 8000630:	2300      	movs	r3, #0
 8000632:	e02a      	b.n	800068a <GPIO_Init+0x1ca>
 8000634:	2309      	movs	r3, #9
 8000636:	e028      	b.n	800068a <GPIO_Init+0x1ca>
 8000638:	2308      	movs	r3, #8
 800063a:	e026      	b.n	800068a <GPIO_Init+0x1ca>
 800063c:	2307      	movs	r3, #7
 800063e:	e024      	b.n	800068a <GPIO_Init+0x1ca>
 8000640:	2306      	movs	r3, #6
 8000642:	e022      	b.n	800068a <GPIO_Init+0x1ca>
 8000644:	2305      	movs	r3, #5
 8000646:	e020      	b.n	800068a <GPIO_Init+0x1ca>
 8000648:	2304      	movs	r3, #4
 800064a:	e01e      	b.n	800068a <GPIO_Init+0x1ca>
 800064c:	2303      	movs	r3, #3
 800064e:	e01c      	b.n	800068a <GPIO_Init+0x1ca>
 8000650:	2302      	movs	r3, #2
 8000652:	e01a      	b.n	800068a <GPIO_Init+0x1ca>
 8000654:	2301      	movs	r3, #1
 8000656:	e018      	b.n	800068a <GPIO_Init+0x1ca>
 8000658:	40013c00 	.word	0x40013c00
 800065c:	40020000 	.word	0x40020000
 8000660:	40020400 	.word	0x40020400
 8000664:	40020800 	.word	0x40020800
 8000668:	40020c00 	.word	0x40020c00
 800066c:	40021000 	.word	0x40021000
 8000670:	40021400 	.word	0x40021400
 8000674:	40021800 	.word	0x40021800
 8000678:	40021c00 	.word	0x40021c00
 800067c:	40022000 	.word	0x40022000
 8000680:	40022400 	.word	0x40022400
 8000684:	40022800 	.word	0x40022800
 8000688:	2300      	movs	r3, #0
 800068a:	823b      	strh	r3, [r7, #16]

			DISC_SYSCFG_PCLK_EN();
 800068c:	4b60      	ldr	r3, [pc, #384]	; (8000810 <GPIO_Init+0x350>)
 800068e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000690:	4a5f      	ldr	r2, [pc, #380]	; (8000810 <GPIO_Init+0x350>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6453      	str	r3, [r2, #68]	; 0x44

			DISC_SYSCFG->SYSCFG_EXTICR[temp1] |= temp3 << (temp2 * 4);
 8000698:	4a5e      	ldr	r2, [pc, #376]	; (8000814 <GPIO_Init+0x354>)
 800069a:	7cfb      	ldrb	r3, [r7, #19]
 800069c:	3302      	adds	r3, #2
 800069e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006a2:	8a39      	ldrh	r1, [r7, #16]
 80006a4:	7cbb      	ldrb	r3, [r7, #18]
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	fa01 f303 	lsl.w	r3, r1, r3
 80006ac:	4618      	mov	r0, r3
 80006ae:	4959      	ldr	r1, [pc, #356]	; (8000814 <GPIO_Init+0x354>)
 80006b0:	7cfb      	ldrb	r3, [r7, #19]
 80006b2:	4302      	orrs	r2, r0
 80006b4:	3302      	adds	r3, #2
 80006b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			DISC_EXTI->EXTI_IMR |= 1 << pGPIOx_Handle -> GPIOx_PinConfig.GPIOx_PinNo;
 80006ba:	4b57      	ldr	r3, [pc, #348]	; (8000818 <GPIO_Init+0x358>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	7912      	ldrb	r2, [r2, #4]
 80006c2:	4611      	mov	r1, r2
 80006c4:	2201      	movs	r2, #1
 80006c6:	408a      	lsls	r2, r1
 80006c8:	4611      	mov	r1, r2
 80006ca:	4a53      	ldr	r2, [pc, #332]	; (8000818 <GPIO_Init+0x358>)
 80006cc:	430b      	orrs	r3, r1
 80006ce:	6013      	str	r3, [r2, #0]

		}

	// configure speed
	temp = (pGPIOx_Handle->GPIOx_PinConfig.GPIOx_PinSpeed << (2 * pGPIOx_Handle->GPIOx_PinConfig.GPIOx_PinNo));
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	799b      	ldrb	r3, [r3, #6]
 80006d4:	461a      	mov	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	791b      	ldrb	r3, [r3, #4]
 80006da:	005b      	lsls	r3, r3, #1
 80006dc:	fa02 f303 	lsl.w	r3, r2, r3
 80006e0:	617b      	str	r3, [r7, #20]
	pGPIOx_Handle->pGPIOx->GPIO_OSPEEDR &= ~(0x3 << (2 * pGPIOx_Handle->GPIOx_PinConfig.GPIOx_PinNo));
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	689a      	ldr	r2, [r3, #8]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	791b      	ldrb	r3, [r3, #4]
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	2103      	movs	r1, #3
 80006f0:	fa01 f303 	lsl.w	r3, r1, r3
 80006f4:	43db      	mvns	r3, r3
 80006f6:	4619      	mov	r1, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	400a      	ands	r2, r1
 80006fe:	609a      	str	r2, [r3, #8]
	pGPIOx_Handle->pGPIOx->GPIO_OSPEEDR |= temp;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	6899      	ldr	r1, [r3, #8]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	697a      	ldr	r2, [r7, #20]
 800070c:	430a      	orrs	r2, r1
 800070e:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]

	// configure pull up pull down
	temp = (pGPIOx_Handle->GPIOx_PinConfig.GPIOx_PinResControl << (2 * pGPIOx_Handle->GPIOx_PinConfig.GPIOx_PinNo));
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	79db      	ldrb	r3, [r3, #7]
 8000718:	461a      	mov	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	791b      	ldrb	r3, [r3, #4]
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	fa02 f303 	lsl.w	r3, r2, r3
 8000724:	617b      	str	r3, [r7, #20]
	pGPIOx_Handle->pGPIOx->GPIO_PUPDR &= ~(0x3 << (2 * pGPIOx_Handle->GPIOx_PinConfig.GPIOx_PinNo));
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	68da      	ldr	r2, [r3, #12]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	791b      	ldrb	r3, [r3, #4]
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	2103      	movs	r1, #3
 8000734:	fa01 f303 	lsl.w	r3, r1, r3
 8000738:	43db      	mvns	r3, r3
 800073a:	4619      	mov	r1, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	400a      	ands	r2, r1
 8000742:	60da      	str	r2, [r3, #12]
	pGPIOx_Handle->pGPIOx->GPIO_PUPDR |= temp;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	68d9      	ldr	r1, [r3, #12]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	697a      	ldr	r2, [r7, #20]
 8000750:	430a      	orrs	r2, r1
 8000752:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]

	// configure output type
	temp = (pGPIOx_Handle->GPIOx_PinConfig.GPIOx_PinOutType << (pGPIOx_Handle->GPIOx_PinConfig.GPIOx_PinNo));
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	7a1b      	ldrb	r3, [r3, #8]
 800075c:	461a      	mov	r2, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	791b      	ldrb	r3, [r3, #4]
 8000762:	fa02 f303 	lsl.w	r3, r2, r3
 8000766:	617b      	str	r3, [r7, #20]
	pGPIOx_Handle->pGPIOx->GPIO_OTYPER &= ~(0x1 << (pGPIOx_Handle->GPIOx_PinConfig.GPIOx_PinNo));
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	685a      	ldr	r2, [r3, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	791b      	ldrb	r3, [r3, #4]
 8000772:	4619      	mov	r1, r3
 8000774:	2301      	movs	r3, #1
 8000776:	408b      	lsls	r3, r1
 8000778:	43db      	mvns	r3, r3
 800077a:	4619      	mov	r1, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	400a      	ands	r2, r1
 8000782:	605a      	str	r2, [r3, #4]
	pGPIOx_Handle->pGPIOx->GPIO_OTYPER |= temp;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	6859      	ldr	r1, [r3, #4]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	697a      	ldr	r2, [r7, #20]
 8000790:	430a      	orrs	r2, r1
 8000792:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]

	// configure alt functionality
	if(pGPIOx_Handle->GPIOx_PinConfig.GPIOx_PinMode == GPIOx_PINMODE_ALT){
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	795b      	ldrb	r3, [r3, #5]
 800079c:	2b02      	cmp	r3, #2
 800079e:	d133      	bne.n	8000808 <GPIO_Init+0x348>

		uint8_t temp3 = pGPIOx_Handle->GPIOx_PinConfig.GPIOx_PinNo / 8;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	791b      	ldrb	r3, [r3, #4]
 80007a4:	08db      	lsrs	r3, r3, #3
 80007a6:	73fb      	strb	r3, [r7, #15]
		uint8_t temp4 = pGPIOx_Handle->GPIOx_PinConfig.GPIOx_PinNo  % 8;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	791b      	ldrb	r3, [r3, #4]
 80007ac:	f003 0307 	and.w	r3, r3, #7
 80007b0:	73bb      	strb	r3, [r7, #14]
		pGPIOx_Handle->pGPIOx->GPIO_AFR[temp3] &= ~(0xF << ( 4 * temp4 ) ); //clearing
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	7bfa      	ldrb	r2, [r7, #15]
 80007b8:	3208      	adds	r2, #8
 80007ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007be:	7bbb      	ldrb	r3, [r7, #14]
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	220f      	movs	r2, #15
 80007c4:	fa02 f303 	lsl.w	r3, r2, r3
 80007c8:	43db      	mvns	r3, r3
 80007ca:	4618      	mov	r0, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	7bfa      	ldrb	r2, [r7, #15]
 80007d2:	4001      	ands	r1, r0
 80007d4:	3208      	adds	r2, #8
 80007d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOx_Handle->pGPIOx->GPIO_AFR[temp3] |= (pGPIOx_Handle->GPIOx_PinConfig.GPIOx_PinAltMode << ( 4 * temp4 ) );
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	7bfa      	ldrb	r2, [r7, #15]
 80007e0:	3208      	adds	r2, #8
 80007e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	7a5b      	ldrb	r3, [r3, #9]
 80007ea:	461a      	mov	r2, r3
 80007ec:	7bbb      	ldrb	r3, [r7, #14]
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	fa02 f303 	lsl.w	r3, r2, r3
 80007f4:	4618      	mov	r0, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	7bfa      	ldrb	r2, [r7, #15]
 80007fc:	4301      	orrs	r1, r0
 80007fe:	3208      	adds	r2, #8
 8000800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		temp = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
	}
}
 8000808:	bf00      	nop
 800080a:	3718      	adds	r7, #24
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40023800 	.word	0x40023800
 8000814:	40013800 	.word	0x40013800
 8000818:	40013c00 	.word	0x40013c00

0800081c <GPIO_TogglePin>:
 * @return						- none
 *
 * @Note						- none
 *
 */
void GPIO_TogglePin(GPIOx_Configuration_t *pGPIOx, uint8_t pinNumber){
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	460b      	mov	r3, r1
 8000826:	70fb      	strb	r3, [r7, #3]
	pGPIOx->GPIO_ODR ^= (1 << pinNumber);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	78fa      	ldrb	r2, [r7, #3]
 800082e:	2101      	movs	r1, #1
 8000830:	fa01 f202 	lsl.w	r2, r1, r2
 8000834:	405a      	eors	r2, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	615a      	str	r2, [r3, #20]
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
	...

08000848 <GPIO_IRQConfig>:
 * @return						- none
 *
 * @Note						- none
 *
 */
void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t IRQPriority, uint8_t state){
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
 8000852:	460b      	mov	r3, r1
 8000854:	71bb      	strb	r3, [r7, #6]
 8000856:	4613      	mov	r3, r2
 8000858:	717b      	strb	r3, [r7, #5]

	if(state == ENABLE){
 800085a:	797b      	ldrb	r3, [r7, #5]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d13b      	bne.n	80008d8 <GPIO_IRQConfig+0x90>
		if(IRQNumber <= 31){
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	2b1f      	cmp	r3, #31
 8000864:	d80a      	bhi.n	800087c <GPIO_IRQConfig+0x34>
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000866:	4b4b      	ldr	r3, [pc, #300]	; (8000994 <GPIO_IRQConfig+0x14c>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	79fa      	ldrb	r2, [r7, #7]
 800086c:	2101      	movs	r1, #1
 800086e:	fa01 f202 	lsl.w	r2, r1, r2
 8000872:	4611      	mov	r1, r2
 8000874:	4a47      	ldr	r2, [pc, #284]	; (8000994 <GPIO_IRQConfig+0x14c>)
 8000876:	430b      	orrs	r3, r1
 8000878:	6013      	str	r3, [r2, #0]
 800087a:	e068      	b.n	800094e <GPIO_IRQConfig+0x106>
		}
		else if(32 <= IRQNumber && IRQNumber <= 61){
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	2b1f      	cmp	r3, #31
 8000880:	d90f      	bls.n	80008a2 <GPIO_IRQConfig+0x5a>
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	2b3d      	cmp	r3, #61	; 0x3d
 8000886:	d80c      	bhi.n	80008a2 <GPIO_IRQConfig+0x5a>
			*NVIC_ISER1 |= (1 << IRQNumber % 32);
 8000888:	4b43      	ldr	r3, [pc, #268]	; (8000998 <GPIO_IRQConfig+0x150>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	79fa      	ldrb	r2, [r7, #7]
 800088e:	f002 021f 	and.w	r2, r2, #31
 8000892:	2101      	movs	r1, #1
 8000894:	fa01 f202 	lsl.w	r2, r1, r2
 8000898:	4611      	mov	r1, r2
 800089a:	4a3f      	ldr	r2, [pc, #252]	; (8000998 <GPIO_IRQConfig+0x150>)
 800089c:	430b      	orrs	r3, r1
 800089e:	6013      	str	r3, [r2, #0]
 80008a0:	e055      	b.n	800094e <GPIO_IRQConfig+0x106>
		}
		else if(62 <= IRQNumber && IRQNumber <= 95){
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	2b3d      	cmp	r3, #61	; 0x3d
 80008a6:	d952      	bls.n	800094e <GPIO_IRQConfig+0x106>
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	2b5f      	cmp	r3, #95	; 0x5f
 80008ac:	d84f      	bhi.n	800094e <GPIO_IRQConfig+0x106>
			*NVIC_ISER2 |= (1 << IRQNumber % 62);
 80008ae:	4b3b      	ldr	r3, [pc, #236]	; (800099c <GPIO_IRQConfig+0x154>)
 80008b0:	6818      	ldr	r0, [r3, #0]
 80008b2:	79fa      	ldrb	r2, [r7, #7]
 80008b4:	0853      	lsrs	r3, r2, #1
 80008b6:	493a      	ldr	r1, [pc, #232]	; (80009a0 <GPIO_IRQConfig+0x158>)
 80008b8:	fba1 1303 	umull	r1, r3, r1, r3
 80008bc:	0919      	lsrs	r1, r3, #4
 80008be:	460b      	mov	r3, r1
 80008c0:	015b      	lsls	r3, r3, #5
 80008c2:	1a5b      	subs	r3, r3, r1
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	461a      	mov	r2, r3
 80008cc:	2301      	movs	r3, #1
 80008ce:	4093      	lsls	r3, r2
 80008d0:	4a32      	ldr	r2, [pc, #200]	; (800099c <GPIO_IRQConfig+0x154>)
 80008d2:	4303      	orrs	r3, r0
 80008d4:	6013      	str	r3, [r2, #0]
 80008d6:	e03a      	b.n	800094e <GPIO_IRQConfig+0x106>
		}

	}
	else{
		if(IRQNumber <= 31){
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	2b1f      	cmp	r3, #31
 80008dc:	d80a      	bhi.n	80008f4 <GPIO_IRQConfig+0xac>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80008de:	4b31      	ldr	r3, [pc, #196]	; (80009a4 <GPIO_IRQConfig+0x15c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	79fa      	ldrb	r2, [r7, #7]
 80008e4:	2101      	movs	r1, #1
 80008e6:	fa01 f202 	lsl.w	r2, r1, r2
 80008ea:	4611      	mov	r1, r2
 80008ec:	4a2d      	ldr	r2, [pc, #180]	; (80009a4 <GPIO_IRQConfig+0x15c>)
 80008ee:	430b      	orrs	r3, r1
 80008f0:	6013      	str	r3, [r2, #0]
 80008f2:	e02c      	b.n	800094e <GPIO_IRQConfig+0x106>
		}
		else if(32 <= IRQNumber && IRQNumber <= 61){
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	2b1f      	cmp	r3, #31
 80008f8:	d90f      	bls.n	800091a <GPIO_IRQConfig+0xd2>
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	2b3d      	cmp	r3, #61	; 0x3d
 80008fe:	d80c      	bhi.n	800091a <GPIO_IRQConfig+0xd2>
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
 8000900:	4b29      	ldr	r3, [pc, #164]	; (80009a8 <GPIO_IRQConfig+0x160>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	79fa      	ldrb	r2, [r7, #7]
 8000906:	f002 021f 	and.w	r2, r2, #31
 800090a:	2101      	movs	r1, #1
 800090c:	fa01 f202 	lsl.w	r2, r1, r2
 8000910:	4611      	mov	r1, r2
 8000912:	4a25      	ldr	r2, [pc, #148]	; (80009a8 <GPIO_IRQConfig+0x160>)
 8000914:	430b      	orrs	r3, r1
 8000916:	6013      	str	r3, [r2, #0]
 8000918:	e019      	b.n	800094e <GPIO_IRQConfig+0x106>
		}
		else if(62 <= IRQNumber && IRQNumber <= 95){
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	2b3d      	cmp	r3, #61	; 0x3d
 800091e:	d916      	bls.n	800094e <GPIO_IRQConfig+0x106>
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	2b5f      	cmp	r3, #95	; 0x5f
 8000924:	d813      	bhi.n	800094e <GPIO_IRQConfig+0x106>
			*NVIC_ICER2 |= (1 << IRQNumber % 62);
 8000926:	4b21      	ldr	r3, [pc, #132]	; (80009ac <GPIO_IRQConfig+0x164>)
 8000928:	6818      	ldr	r0, [r3, #0]
 800092a:	79fa      	ldrb	r2, [r7, #7]
 800092c:	0853      	lsrs	r3, r2, #1
 800092e:	491c      	ldr	r1, [pc, #112]	; (80009a0 <GPIO_IRQConfig+0x158>)
 8000930:	fba1 1303 	umull	r1, r3, r1, r3
 8000934:	0919      	lsrs	r1, r3, #4
 8000936:	460b      	mov	r3, r1
 8000938:	015b      	lsls	r3, r3, #5
 800093a:	1a5b      	subs	r3, r3, r1
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	b2db      	uxtb	r3, r3
 8000942:	461a      	mov	r2, r3
 8000944:	2301      	movs	r3, #1
 8000946:	4093      	lsls	r3, r2
 8000948:	4a18      	ldr	r2, [pc, #96]	; (80009ac <GPIO_IRQConfig+0x164>)
 800094a:	4303      	orrs	r3, r0
 800094c:	6013      	str	r3, [r2, #0]
		}
	}

	uint8_t temp = IRQNumber / 4;
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	089b      	lsrs	r3, r3, #2
 8000952:	73fb      	strb	r3, [r7, #15]
	uint8_t temp1 = IRQNumber % 4;
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	f003 0303 	and.w	r3, r3, #3
 800095a:	73bb      	strb	r3, [r7, #14]

	*(NVIC_PR_BASE_ADDR + temp) |= (IRQPriority << (8 * temp1 + 4));
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000964:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	79b9      	ldrb	r1, [r7, #6]
 800096c:	7bbb      	ldrb	r3, [r7, #14]
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	3304      	adds	r3, #4
 8000972:	fa01 f303 	lsl.w	r3, r1, r3
 8000976:	4619      	mov	r1, r3
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000980:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000984:	430a      	orrs	r2, r1
 8000986:	601a      	str	r2, [r3, #0]

}
 8000988:	bf00      	nop
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	e000e100 	.word	0xe000e100
 8000998:	e000e104 	.word	0xe000e104
 800099c:	e000e108 	.word	0xe000e108
 80009a0:	84210843 	.word	0x84210843
 80009a4:	e000e180 	.word	0xe000e180
 80009a8:	e000e184 	.word	0xe000e184
 80009ac:	e000e188 	.word	0xe000e188

080009b0 <GPIO_IRQHandle>:
 * @return						- none
 *
 * @Note						- none
 *
 */
void GPIO_IRQHandle(uint8_t pinNumber){
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]

	if(DISC_EXTI->EXTI_PR & (1 << pinNumber)){
 80009ba:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <GPIO_IRQHandle+0x3c>)
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	79fa      	ldrb	r2, [r7, #7]
 80009c0:	2101      	movs	r1, #1
 80009c2:	fa01 f202 	lsl.w	r2, r1, r2
 80009c6:	4013      	ands	r3, r2
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d009      	beq.n	80009e0 <GPIO_IRQHandle+0x30>
		DISC_EXTI->EXTI_PR |= (1 << pinNumber);
 80009cc:	4b07      	ldr	r3, [pc, #28]	; (80009ec <GPIO_IRQHandle+0x3c>)
 80009ce:	695b      	ldr	r3, [r3, #20]
 80009d0:	79fa      	ldrb	r2, [r7, #7]
 80009d2:	2101      	movs	r1, #1
 80009d4:	fa01 f202 	lsl.w	r2, r1, r2
 80009d8:	4611      	mov	r1, r2
 80009da:	4a04      	ldr	r2, [pc, #16]	; (80009ec <GPIO_IRQHandle+0x3c>)
 80009dc:	430b      	orrs	r3, r1
 80009de:	6153      	str	r3, [r2, #20]
	}

}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	40013c00 	.word	0x40013c00

080009f0 <SPI_PCLKControl>:
 * @return						- none
 *
 * @Note						- none
 *
 */
void SPI_PCLKControl(SPI_Configuration_t *pSPIx, uint8_t status){
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	460b      	mov	r3, r1
 80009fa:	70fb      	strb	r3, [r7, #3]
	if(status == ENABLE){
 80009fc:	78fb      	ldrb	r3, [r7, #3]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d141      	bne.n	8000a86 <SPI_PCLKControl+0x96>
		if(pSPIx==DISC_SPI1){
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a43      	ldr	r2, [pc, #268]	; (8000b14 <SPI_PCLKControl+0x124>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d106      	bne.n	8000a18 <SPI_PCLKControl+0x28>
			DISC_SPI1_PCLK_EN();
 8000a0a:	4b43      	ldr	r3, [pc, #268]	; (8000b18 <SPI_PCLKControl+0x128>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	4a42      	ldr	r2, [pc, #264]	; (8000b18 <SPI_PCLKControl+0x128>)
 8000a10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a14:	6453      	str	r3, [r2, #68]	; 0x44
		}
		else if(pSPIx==DISC_SPI6){
			DISC_SPI6_PCLK_DIS();
		}
	}
}
 8000a16:	e077      	b.n	8000b08 <SPI_PCLKControl+0x118>
		else if(pSPIx==DISC_SPI2I2S2){
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a40      	ldr	r2, [pc, #256]	; (8000b1c <SPI_PCLKControl+0x12c>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d106      	bne.n	8000a2e <SPI_PCLKControl+0x3e>
			DISC_SPI2_PCLK_EN();
 8000a20:	4b3d      	ldr	r3, [pc, #244]	; (8000b18 <SPI_PCLKControl+0x128>)
 8000a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a24:	4a3c      	ldr	r2, [pc, #240]	; (8000b18 <SPI_PCLKControl+0x128>)
 8000a26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a2a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a2c:	e06c      	b.n	8000b08 <SPI_PCLKControl+0x118>
		else if(pSPIx==DISC_SPI3I2S3){
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a3b      	ldr	r2, [pc, #236]	; (8000b20 <SPI_PCLKControl+0x130>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d106      	bne.n	8000a44 <SPI_PCLKControl+0x54>
			DISC_SPI3_PCLK_EN();
 8000a36:	4b38      	ldr	r3, [pc, #224]	; (8000b18 <SPI_PCLKControl+0x128>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	4a37      	ldr	r2, [pc, #220]	; (8000b18 <SPI_PCLKControl+0x128>)
 8000a3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a40:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a42:	e061      	b.n	8000b08 <SPI_PCLKControl+0x118>
		else if(pSPIx==DISC_SPI4){
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a37      	ldr	r2, [pc, #220]	; (8000b24 <SPI_PCLKControl+0x134>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d106      	bne.n	8000a5a <SPI_PCLKControl+0x6a>
			DISC_SPI4_PCLK_EN();
 8000a4c:	4b32      	ldr	r3, [pc, #200]	; (8000b18 <SPI_PCLKControl+0x128>)
 8000a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a50:	4a31      	ldr	r2, [pc, #196]	; (8000b18 <SPI_PCLKControl+0x128>)
 8000a52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a56:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a58:	e056      	b.n	8000b08 <SPI_PCLKControl+0x118>
		else if(pSPIx==DISC_SPI5){
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a32      	ldr	r2, [pc, #200]	; (8000b28 <SPI_PCLKControl+0x138>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d106      	bne.n	8000a70 <SPI_PCLKControl+0x80>
			DISC_SPI5_PCLK_EN();
 8000a62:	4b2d      	ldr	r3, [pc, #180]	; (8000b18 <SPI_PCLKControl+0x128>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	4a2c      	ldr	r2, [pc, #176]	; (8000b18 <SPI_PCLKControl+0x128>)
 8000a68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a6c:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a6e:	e04b      	b.n	8000b08 <SPI_PCLKControl+0x118>
		else if(pSPIx==DISC_SPI6){
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a2e      	ldr	r2, [pc, #184]	; (8000b2c <SPI_PCLKControl+0x13c>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d147      	bne.n	8000b08 <SPI_PCLKControl+0x118>
			DISC_SPI6_PCLK_EN();
 8000a78:	4b27      	ldr	r3, [pc, #156]	; (8000b18 <SPI_PCLKControl+0x128>)
 8000a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7c:	4a26      	ldr	r2, [pc, #152]	; (8000b18 <SPI_PCLKControl+0x128>)
 8000a7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a82:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a84:	e040      	b.n	8000b08 <SPI_PCLKControl+0x118>
		if(pSPIx==DISC_SPI1){
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4a22      	ldr	r2, [pc, #136]	; (8000b14 <SPI_PCLKControl+0x124>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d106      	bne.n	8000a9c <SPI_PCLKControl+0xac>
			DISC_SPI1_PCLK_DIS();
 8000a8e:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <SPI_PCLKControl+0x128>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	4a21      	ldr	r2, [pc, #132]	; (8000b18 <SPI_PCLKControl+0x128>)
 8000a94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a98:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a9a:	e035      	b.n	8000b08 <SPI_PCLKControl+0x118>
		else if(pSPIx==DISC_SPI2I2S2){
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a1f      	ldr	r2, [pc, #124]	; (8000b1c <SPI_PCLKControl+0x12c>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d106      	bne.n	8000ab2 <SPI_PCLKControl+0xc2>
			DISC_SPI2_PCLK_DIS();
 8000aa4:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <SPI_PCLKControl+0x128>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	4a1b      	ldr	r2, [pc, #108]	; (8000b18 <SPI_PCLKControl+0x128>)
 8000aaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000aae:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ab0:	e02a      	b.n	8000b08 <SPI_PCLKControl+0x118>
		else if(pSPIx==DISC_SPI3I2S3){
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a1a      	ldr	r2, [pc, #104]	; (8000b20 <SPI_PCLKControl+0x130>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d106      	bne.n	8000ac8 <SPI_PCLKControl+0xd8>
			DISC_SPI3_PCLK_DIS();
 8000aba:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <SPI_PCLKControl+0x128>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	4a16      	ldr	r2, [pc, #88]	; (8000b18 <SPI_PCLKControl+0x128>)
 8000ac0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ac4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ac6:	e01f      	b.n	8000b08 <SPI_PCLKControl+0x118>
		else if(pSPIx==DISC_SPI4){
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4a16      	ldr	r2, [pc, #88]	; (8000b24 <SPI_PCLKControl+0x134>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d106      	bne.n	8000ade <SPI_PCLKControl+0xee>
			DISC_SPI4_PCLK_DIS();
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <SPI_PCLKControl+0x128>)
 8000ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad4:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <SPI_PCLKControl+0x128>)
 8000ad6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ada:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000adc:	e014      	b.n	8000b08 <SPI_PCLKControl+0x118>
		else if(pSPIx==DISC_SPI5){
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a11      	ldr	r2, [pc, #68]	; (8000b28 <SPI_PCLKControl+0x138>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d106      	bne.n	8000af4 <SPI_PCLKControl+0x104>
			DISC_SPI5_PCLK_DIS();
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <SPI_PCLKControl+0x128>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	4a0b      	ldr	r2, [pc, #44]	; (8000b18 <SPI_PCLKControl+0x128>)
 8000aec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000af0:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000af2:	e009      	b.n	8000b08 <SPI_PCLKControl+0x118>
		else if(pSPIx==DISC_SPI6){
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a0d      	ldr	r2, [pc, #52]	; (8000b2c <SPI_PCLKControl+0x13c>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d105      	bne.n	8000b08 <SPI_PCLKControl+0x118>
			DISC_SPI6_PCLK_DIS();
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <SPI_PCLKControl+0x128>)
 8000afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b00:	4a05      	ldr	r2, [pc, #20]	; (8000b18 <SPI_PCLKControl+0x128>)
 8000b02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000b06:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	40013000 	.word	0x40013000
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40003800 	.word	0x40003800
 8000b20:	40003c00 	.word	0x40003c00
 8000b24:	40013400 	.word	0x40013400
 8000b28:	40015000 	.word	0x40015000
 8000b2c:	40015400 	.word	0x40015400

08000b30 <SPI_Init>:
 * @return						- none
 *
 * @Note						- none
 *
 */
void SPI_Init(SPIx_Handle_t *pSPIx_Handle){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]



	SPI_PCLKControl(pSPIx_Handle->pSPIx, ENABLE);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ff56 	bl	80009f0 <SPI_PCLKControl>

	//Configure Device Mode
	pSPIx_Handle->pSPIx->SPI_CR1 &= ~(1 << SPIx_REG_MSTR);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f022 0204 	bic.w	r2, r2, #4
 8000b52:	601a      	str	r2, [r3, #0]
	pSPIx_Handle->pSPIx->SPI_CR1 |=  (pSPIx_Handle->SPIx_PinConfig.SPIx_DeviceMode << SPIx_REG_MSTR);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	791b      	ldrb	r3, [r3, #4]
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	4619      	mov	r1, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	430a      	orrs	r2, r1
 8000b68:	601a      	str	r2, [r3, #0]

	//Configure Bus Configuration
	if(pSPIx_Handle->SPIx_PinConfig.SPIx_BusConfig == SPIx_BUSCONFG_FULLDUPLEX){
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	795b      	ldrb	r3, [r3, #5]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d108      	bne.n	8000b84 <SPI_Init+0x54>
		pSPIx_Handle->pSPIx->SPI_CR1 &= ~(1 << SPIx_REG_BIDIMODE);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	e020      	b.n	8000bc6 <SPI_Init+0x96>
	}
	else if (pSPIx_Handle->SPIx_PinConfig.SPIx_BusConfig == SPIx_BUSCONFG_HALFDUPLEX) {
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	795b      	ldrb	r3, [r3, #5]
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d108      	bne.n	8000b9e <SPI_Init+0x6e>
		pSPIx_Handle->pSPIx->SPI_CR1 |= (1 << SPIx_REG_BIDIMODE);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	e013      	b.n	8000bc6 <SPI_Init+0x96>
	}
	else if (pSPIx_Handle->SPIx_PinConfig.SPIx_BusConfig == SPIx_BUSCONFG_RXONLY) {
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	795b      	ldrb	r3, [r3, #5]
 8000ba2:	2b03      	cmp	r3, #3
 8000ba4:	d10f      	bne.n	8000bc6 <SPI_Init+0x96>
		pSPIx_Handle->pSPIx->SPI_CR1 &= ~(1 << SPIx_REG_BIDIMODE);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000bb4:	601a      	str	r2, [r3, #0]
		pSPIx_Handle->pSPIx->SPI_CR1 |= (1 << SPIx_REG_RXONLY);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000bc4:	601a      	str	r2, [r3, #0]
	}

	//Configure PCLK Speed
	pSPIx_Handle->pSPIx->SPI_CR1 &= ~(7 << SPIx_REG_BR);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8000bd4:	601a      	str	r2, [r3, #0]
	pSPIx_Handle->pSPIx->SPI_CR1 |= (pSPIx_Handle->SPIx_PinConfig.SPIx_SCLKSpeed << SPIx_REG_BR);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	799b      	ldrb	r3, [r3, #6]
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	4619      	mov	r1, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	430a      	orrs	r2, r1
 8000bea:	601a      	str	r2, [r3, #0]

	//Configure Data Frame
	pSPIx_Handle->pSPIx->SPI_CR1 &= ~(1 << SPIx_REG_DFF);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000bfa:	601a      	str	r2, [r3, #0]
	pSPIx_Handle->pSPIx->SPI_CR1 |=  pSPIx_Handle->SPIx_PinConfig.SPIx_DFF << SPIx_REG_DFF;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	79db      	ldrb	r3, [r3, #7]
 8000c06:	02db      	lsls	r3, r3, #11
 8000c08:	4619      	mov	r1, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	601a      	str	r2, [r3, #0]

	//Configure Clock Polarity
	pSPIx_Handle->pSPIx->SPI_CR1 &= ~(1 << SPIx_REG_CPOL);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f022 0202 	bic.w	r2, r2, #2
 8000c20:	601a      	str	r2, [r3, #0]
	pSPIx_Handle->pSPIx->SPI_CR1 |=  pSPIx_Handle->SPIx_PinConfig.SPIx_CPOL << SPIx_REG_CPOL;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	7a1b      	ldrb	r3, [r3, #8]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	4619      	mov	r1, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	430a      	orrs	r2, r1
 8000c36:	601a      	str	r2, [r3, #0]

	//Configure Clock Phase
	pSPIx_Handle->pSPIx->SPI_CR1 &= ~(1 << SPIx_REG_CPHA);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f022 0201 	bic.w	r2, r2, #1
 8000c46:	601a      	str	r2, [r3, #0]
	pSPIx_Handle->pSPIx->SPI_CR1 |=  pSPIx_Handle->SPIx_PinConfig.SPIx_CPHA << SPIx_REG_CPHA;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	7a5b      	ldrb	r3, [r3, #9]
 8000c52:	4619      	mov	r1, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	601a      	str	r2, [r3, #0]

	//Configure SSM
	pSPIx_Handle->pSPIx->SPI_CR1 &= ~(1 << SPIx_REG_SSM);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000c6a:	601a      	str	r2, [r3, #0]
	pSPIx_Handle->pSPIx->SPI_CR1 |=  pSPIx_Handle->SPIx_PinConfig.SPIx_SSM << SPIx_REG_SSM;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	7a9b      	ldrb	r3, [r3, #10]
 8000c76:	025b      	lsls	r3, r3, #9
 8000c78:	4619      	mov	r1, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	601a      	str	r2, [r3, #0]

	//Configure SSI
	if(pSPIx_Handle->SPIx_PinConfig.SPIx_SSM == SPIx_SSM_SSM){
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	7a9b      	ldrb	r3, [r3, #10]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d108      	bne.n	8000c9c <SPI_Init+0x16c>
		pSPIx_Handle->pSPIx->SPI_CR1 |= (1 << SPIx_REG_SSI);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c98:	601a      	str	r2, [r3, #0]
	else if(pSPIx_Handle->SPIx_PinConfig.SPIx_SSM == SPIx_SSM_HSM){
		pSPIx_Handle->pSPIx->SPI_CR2 |= (1 << SPIx_REG_SSOE);
	}


}
 8000c9a:	e00b      	b.n	8000cb4 <SPI_Init+0x184>
	else if(pSPIx_Handle->SPIx_PinConfig.SPIx_SSM == SPIx_SSM_HSM){
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	7a9b      	ldrb	r3, [r3, #10]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d107      	bne.n	8000cb4 <SPI_Init+0x184>
		pSPIx_Handle->pSPIx->SPI_CR2 |= (1 << SPIx_REG_SSOE);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	685a      	ldr	r2, [r3, #4]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f042 0204 	orr.w	r2, r2, #4
 8000cb2:	605a      	str	r2, [r3, #4]
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <SPI_Status>:
 * @return						- none
 *
 * @Note						- none
 *
 */
void SPI_Status(SPI_Configuration_t *pSPIx, uint8_t status){
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	70fb      	strb	r3, [r7, #3]

	if(status == ENABLE){
 8000cc8:	78fb      	ldrb	r3, [r7, #3]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d106      	bne.n	8000cdc <SPI_Status+0x20>
		pSPIx->SPI_CR1 |= (1 << SPIx_REG_SPE);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	601a      	str	r2, [r3, #0]
	}
	else if (status == DISABLE){
		pSPIx->SPI_CR1 &= ~(1 << SPIx_REG_SPE);
	}

}
 8000cda:	e008      	b.n	8000cee <SPI_Status+0x32>
	else if (status == DISABLE){
 8000cdc:	78fb      	ldrb	r3, [r7, #3]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d105      	bne.n	8000cee <SPI_Status+0x32>
		pSPIx->SPI_CR1 &= ~(1 << SPIx_REG_SPE);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	601a      	str	r2, [r3, #0]
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <SPI_SendDataIT>:
 * @return						- The input result of the port 16 bit
 *
 * @Note						- none
 *
 */
uint8_t SPI_SendDataIT(SPIx_Handle_t *pSPIx_Handle, uint8_t *TxBuffer, uint32_t DataLen){
 8000cfa:	b480      	push	{r7}
 8000cfc:	b087      	sub	sp, #28
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	60f8      	str	r0, [r7, #12]
 8000d02:	60b9      	str	r1, [r7, #8]
 8000d04:	607a      	str	r2, [r7, #4]

	//Fetch the TX status
	uint8_t status = pSPIx_Handle->TxStat;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	7f1b      	ldrb	r3, [r3, #28]
 8000d0a:	75fb      	strb	r3, [r7, #23]

	if(status != SPIx_BUSY_TX){
 8000d0c:	7dfb      	ldrb	r3, [r7, #23]
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d010      	beq.n	8000d34 <SPI_SendDataIT+0x3a>

		//Save the data and data length to global variables
		pSPIx_Handle->pTxBuffer = TxBuffer;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	68ba      	ldr	r2, [r7, #8]
 8000d16:	60da      	str	r2, [r3, #12]
		pSPIx_Handle->TxLen = DataLen;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	615a      	str	r2, [r3, #20]

		//Set the busy flag
		pSPIx_Handle->TxStat = SPIx_BUSY_TX;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2202      	movs	r2, #2
 8000d22:	771a      	strb	r2, [r3, #28]

		//Enable the interrupt
		pSPIx_Handle->pSPIx->SPI_CR2 |= (1 << SPIx_REG_TXEIE);
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d32:	605a      	str	r2, [r3, #4]
	}

	return status;
 8000d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	371c      	adds	r7, #28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <SPI_RecieveDataIT>:
 * @return						- The input result of the port 16 bit
 *
 * @Note						- none
 *
 */
uint8_t SPI_RecieveDataIT(SPIx_Handle_t *pSPIx_Handle, uint8_t *RxBuffer, uint32_t DataLen){
 8000d42:	b480      	push	{r7}
 8000d44:	b087      	sub	sp, #28
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	60f8      	str	r0, [r7, #12]
 8000d4a:	60b9      	str	r1, [r7, #8]
 8000d4c:	607a      	str	r2, [r7, #4]

	//Fetch the RX status
	uint8_t status = pSPIx_Handle->RxStat;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	7f5b      	ldrb	r3, [r3, #29]
 8000d52:	75fb      	strb	r3, [r7, #23]

	if(status != SPIx_BUSY_RX){
 8000d54:	7dfb      	ldrb	r3, [r7, #23]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d010      	beq.n	8000d7c <SPI_RecieveDataIT+0x3a>

		//Save the data and data length to global variables
		pSPIx_Handle->pRxBuffer = RxBuffer;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	68ba      	ldr	r2, [r7, #8]
 8000d5e:	611a      	str	r2, [r3, #16]
		pSPIx_Handle->RxLen = DataLen;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	619a      	str	r2, [r3, #24]

		//Set the busy flag
		pSPIx_Handle->RxStat = SPIx_BUSY_RX;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	2201      	movs	r2, #1
 8000d6a:	775a      	strb	r2, [r3, #29]

		//Enable the interrupt
		pSPIx_Handle->pSPIx->SPI_CR2 |= (1 << SPIx_REG_RXNEIE);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	685a      	ldr	r2, [r3, #4]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d7a:	605a      	str	r2, [r3, #4]
	}

	return status;
 8000d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	371c      	adds	r7, #28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <SPI_IRQConfig>:
 * @return						- none
 *
 * @Note						- none
 *
 */
void SPI_IRQConfig(uint8_t IRQNumber, uint8_t IRQPriority, uint8_t state){
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
 8000d96:	460b      	mov	r3, r1
 8000d98:	71bb      	strb	r3, [r7, #6]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	717b      	strb	r3, [r7, #5]

	if(state == ENABLE){
 8000d9e:	797b      	ldrb	r3, [r7, #5]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d13b      	bne.n	8000e1c <SPI_IRQConfig+0x90>
		if(IRQNumber <= 31){
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	2b1f      	cmp	r3, #31
 8000da8:	d80a      	bhi.n	8000dc0 <SPI_IRQConfig+0x34>
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000daa:	4b4b      	ldr	r3, [pc, #300]	; (8000ed8 <SPI_IRQConfig+0x14c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	79fa      	ldrb	r2, [r7, #7]
 8000db0:	2101      	movs	r1, #1
 8000db2:	fa01 f202 	lsl.w	r2, r1, r2
 8000db6:	4611      	mov	r1, r2
 8000db8:	4a47      	ldr	r2, [pc, #284]	; (8000ed8 <SPI_IRQConfig+0x14c>)
 8000dba:	430b      	orrs	r3, r1
 8000dbc:	6013      	str	r3, [r2, #0]
 8000dbe:	e068      	b.n	8000e92 <SPI_IRQConfig+0x106>
		}
		else if(32 <= IRQNumber && IRQNumber <= 61){
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	2b1f      	cmp	r3, #31
 8000dc4:	d90f      	bls.n	8000de6 <SPI_IRQConfig+0x5a>
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	2b3d      	cmp	r3, #61	; 0x3d
 8000dca:	d80c      	bhi.n	8000de6 <SPI_IRQConfig+0x5a>
			*NVIC_ISER1 |= (1 << IRQNumber % 32);
 8000dcc:	4b43      	ldr	r3, [pc, #268]	; (8000edc <SPI_IRQConfig+0x150>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	79fa      	ldrb	r2, [r7, #7]
 8000dd2:	f002 021f 	and.w	r2, r2, #31
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ddc:	4611      	mov	r1, r2
 8000dde:	4a3f      	ldr	r2, [pc, #252]	; (8000edc <SPI_IRQConfig+0x150>)
 8000de0:	430b      	orrs	r3, r1
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	e055      	b.n	8000e92 <SPI_IRQConfig+0x106>
		}
		else if(62 <= IRQNumber && IRQNumber <= 95){
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	2b3d      	cmp	r3, #61	; 0x3d
 8000dea:	d952      	bls.n	8000e92 <SPI_IRQConfig+0x106>
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	2b5f      	cmp	r3, #95	; 0x5f
 8000df0:	d84f      	bhi.n	8000e92 <SPI_IRQConfig+0x106>
			*NVIC_ISER2 |= (1 << IRQNumber % 62);
 8000df2:	4b3b      	ldr	r3, [pc, #236]	; (8000ee0 <SPI_IRQConfig+0x154>)
 8000df4:	6818      	ldr	r0, [r3, #0]
 8000df6:	79fa      	ldrb	r2, [r7, #7]
 8000df8:	0853      	lsrs	r3, r2, #1
 8000dfa:	493a      	ldr	r1, [pc, #232]	; (8000ee4 <SPI_IRQConfig+0x158>)
 8000dfc:	fba1 1303 	umull	r1, r3, r1, r3
 8000e00:	0919      	lsrs	r1, r3, #4
 8000e02:	460b      	mov	r3, r1
 8000e04:	015b      	lsls	r3, r3, #5
 8000e06:	1a5b      	subs	r3, r3, r1
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	461a      	mov	r2, r3
 8000e10:	2301      	movs	r3, #1
 8000e12:	4093      	lsls	r3, r2
 8000e14:	4a32      	ldr	r2, [pc, #200]	; (8000ee0 <SPI_IRQConfig+0x154>)
 8000e16:	4303      	orrs	r3, r0
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	e03a      	b.n	8000e92 <SPI_IRQConfig+0x106>
		}

	}
	else{
		if(IRQNumber <= 31){
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	2b1f      	cmp	r3, #31
 8000e20:	d80a      	bhi.n	8000e38 <SPI_IRQConfig+0xac>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000e22:	4b31      	ldr	r3, [pc, #196]	; (8000ee8 <SPI_IRQConfig+0x15c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	79fa      	ldrb	r2, [r7, #7]
 8000e28:	2101      	movs	r1, #1
 8000e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4a2d      	ldr	r2, [pc, #180]	; (8000ee8 <SPI_IRQConfig+0x15c>)
 8000e32:	430b      	orrs	r3, r1
 8000e34:	6013      	str	r3, [r2, #0]
 8000e36:	e02c      	b.n	8000e92 <SPI_IRQConfig+0x106>
		}
		else if(32 <= IRQNumber && IRQNumber <= 61){
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	2b1f      	cmp	r3, #31
 8000e3c:	d90f      	bls.n	8000e5e <SPI_IRQConfig+0xd2>
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	2b3d      	cmp	r3, #61	; 0x3d
 8000e42:	d80c      	bhi.n	8000e5e <SPI_IRQConfig+0xd2>
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
 8000e44:	4b29      	ldr	r3, [pc, #164]	; (8000eec <SPI_IRQConfig+0x160>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	79fa      	ldrb	r2, [r7, #7]
 8000e4a:	f002 021f 	and.w	r2, r2, #31
 8000e4e:	2101      	movs	r1, #1
 8000e50:	fa01 f202 	lsl.w	r2, r1, r2
 8000e54:	4611      	mov	r1, r2
 8000e56:	4a25      	ldr	r2, [pc, #148]	; (8000eec <SPI_IRQConfig+0x160>)
 8000e58:	430b      	orrs	r3, r1
 8000e5a:	6013      	str	r3, [r2, #0]
 8000e5c:	e019      	b.n	8000e92 <SPI_IRQConfig+0x106>
		}
		else if(62 <= IRQNumber && IRQNumber <= 95){
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	2b3d      	cmp	r3, #61	; 0x3d
 8000e62:	d916      	bls.n	8000e92 <SPI_IRQConfig+0x106>
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	2b5f      	cmp	r3, #95	; 0x5f
 8000e68:	d813      	bhi.n	8000e92 <SPI_IRQConfig+0x106>
			*NVIC_ICER2 |= (1 << IRQNumber % 62);
 8000e6a:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <SPI_IRQConfig+0x164>)
 8000e6c:	6818      	ldr	r0, [r3, #0]
 8000e6e:	79fa      	ldrb	r2, [r7, #7]
 8000e70:	0853      	lsrs	r3, r2, #1
 8000e72:	491c      	ldr	r1, [pc, #112]	; (8000ee4 <SPI_IRQConfig+0x158>)
 8000e74:	fba1 1303 	umull	r1, r3, r1, r3
 8000e78:	0919      	lsrs	r1, r3, #4
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	015b      	lsls	r3, r3, #5
 8000e7e:	1a5b      	subs	r3, r3, r1
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	461a      	mov	r2, r3
 8000e88:	2301      	movs	r3, #1
 8000e8a:	4093      	lsls	r3, r2
 8000e8c:	4a18      	ldr	r2, [pc, #96]	; (8000ef0 <SPI_IRQConfig+0x164>)
 8000e8e:	4303      	orrs	r3, r0
 8000e90:	6013      	str	r3, [r2, #0]
		}
	}

	uint8_t temp = IRQNumber / 4;
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	089b      	lsrs	r3, r3, #2
 8000e96:	73fb      	strb	r3, [r7, #15]
	uint8_t temp1 = IRQNumber % 4;
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	f003 0303 	and.w	r3, r3, #3
 8000e9e:	73bb      	strb	r3, [r7, #14]

	*(NVIC_PR_BASE_ADDR + temp) |= (IRQPriority << (8 * temp1 + 4));
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000ea8:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	79b9      	ldrb	r1, [r7, #6]
 8000eb0:	7bbb      	ldrb	r3, [r7, #14]
 8000eb2:	00db      	lsls	r3, r3, #3
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	4619      	mov	r1, r3
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000ec4:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	601a      	str	r2, [r3, #0]

}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000e100 	.word	0xe000e100
 8000edc:	e000e104 	.word	0xe000e104
 8000ee0:	e000e108 	.word	0xe000e108
 8000ee4:	84210843 	.word	0x84210843
 8000ee8:	e000e180 	.word	0xe000e180
 8000eec:	e000e184 	.word	0xe000e184
 8000ef0:	e000e188 	.word	0xe000e188

08000ef4 <SPI_IRQHandle>:
 * @return						- none
 *
 * @Note						- none
 *
 */
void SPI_IRQHandle(SPIx_Handle_t *pSPIx_Handle){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]


	uint8_t temp1, temp2;

	//Check TX
	temp1 = pSPIx_Handle->pSPIx->SPI_SR & SPIx_FLAG_TXE;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	f003 0302 	and.w	r3, r3, #2
 8000f08:	73fb      	strb	r3, [r7, #15]
	temp2 = pSPIx_Handle->pSPIx->SPI_CR2 & (1 << SPIx_REG_TXEIE);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000f16:	73bb      	strb	r3, [r7, #14]

	if(temp1 && temp2){
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d005      	beq.n	8000f2a <SPI_IRQHandle+0x36>
 8000f1e:	7bbb      	ldrb	r3, [r7, #14]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d002      	beq.n	8000f2a <SPI_IRQHandle+0x36>
		SPI_TX_ISR(pSPIx_Handle);
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f000 f832 	bl	8000f8e <SPI_TX_ISR>
	}

	//Check RX
	temp1 = pSPIx_Handle->pSPIx->SPI_SR & SPIx_FLAG_RXNE;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	73fb      	strb	r3, [r7, #15]
	temp2 = pSPIx_Handle->pSPIx->SPI_CR2 & (1 << SPIx_REG_RXNEIE);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f44:	73bb      	strb	r3, [r7, #14]

	if(temp1 && temp2){
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d005      	beq.n	8000f58 <SPI_IRQHandle+0x64>
 8000f4c:	7bbb      	ldrb	r3, [r7, #14]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d002      	beq.n	8000f58 <SPI_IRQHandle+0x64>
		SPI_RX_ISR(pSPIx_Handle);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f000 f85d 	bl	8001012 <SPI_RX_ISR>
	}

	//Check ERR Overrun
	temp1 = pSPIx_Handle->pSPIx->SPI_SR & SPIx_FLAG_OVR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f64:	73fb      	strb	r3, [r7, #15]
	temp2 = pSPIx_Handle->pSPIx->SPI_CR2 & (1 << SPIx_REG_ERRIE);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	f003 0320 	and.w	r3, r3, #32
 8000f72:	73bb      	strb	r3, [r7, #14]

	if(temp1 && temp2){
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d005      	beq.n	8000f86 <SPI_IRQHandle+0x92>
 8000f7a:	7bbb      	ldrb	r3, [r7, #14]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d002      	beq.n	8000f86 <SPI_IRQHandle+0x92>
		SPI_OVR_ISR(pSPIx_Handle);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f000 f88a 	bl	800109a <SPI_OVR_ISR>
	}
}
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <SPI_TX_ISR>:
 * @return						- none
 *
 * @Note						- none
 *
 */
static void SPI_TX_ISR(SPIx_Handle_t *pSPIx_Handle){
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]

	if(((pSPIx_Handle->pSPIx->SPI_CR1 & (1 << SPIx_REG_DFF)) >> SPIx_REG_DFF) == SPIx_DFF_16BIT){
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	0adb      	lsrs	r3, r3, #11
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d10f      	bne.n	8000fc6 <SPI_TX_ISR+0x38>
		pSPIx_Handle->pSPIx->SPI_DR = *(uint16_t*)pSPIx_Handle->pTxBuffer;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	881a      	ldrh	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	60da      	str	r2, [r3, #12]
		pSPIx_Handle->TxLen =- 2;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f06f 0201 	mvn.w	r2, #1
 8000fb8:	615a      	str	r2, [r3, #20]
		(uint16_t*)pSPIx_Handle->pTxBuffer ++;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	1c5a      	adds	r2, r3, #1
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	60da      	str	r2, [r3, #12]
 8000fc4:	e016      	b.n	8000ff4 <SPI_TX_ISR+0x66>
	}
	else if((pSPIx_Handle->pSPIx->SPI_CR1 & (1 << SPIx_REG_DFF)) == SPIx_DFF_8BIT){
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10f      	bne.n	8000ff4 <SPI_TX_ISR+0x66>
		pSPIx_Handle->pSPIx->SPI_DR = *pSPIx_Handle->pTxBuffer;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	781a      	ldrb	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	60da      	str	r2, [r3, #12]
		pSPIx_Handle->TxLen --;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	695b      	ldr	r3, [r3, #20]
 8000fe4:	1e5a      	subs	r2, r3, #1
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	615a      	str	r2, [r3, #20]
		pSPIx_Handle->pTxBuffer ++;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	1c5a      	adds	r2, r3, #1
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	60da      	str	r2, [r3, #12]
	}
	if(!pSPIx_Handle->TxLen){
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	695b      	ldr	r3, [r3, #20]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d106      	bne.n	800100a <SPI_TX_ISR+0x7c>

		SPI_CloseTransmission(pSPIx_Handle);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f000 f860 	bl	80010c2 <SPI_CloseTransmission>

		//Custom ISR by user
		SPI_ApplicationCallback(pSPIx_Handle, SPI_EVENT_TX_CMPLT);
 8001002:	2101      	movs	r1, #1
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f000 f8f1 	bl	80011ec <SPI_ApplicationCallback>
	}
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <SPI_RX_ISR>:
 * @return						- none
 *
 * @Note						- none
 *
 */
static void SPI_RX_ISR(SPIx_Handle_t *pSPIx_Handle){
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]

	if(((pSPIx_Handle->pSPIx->SPI_CR1 &  (1 << SPIx_REG_DFF)) >> SPIx_REG_DFF) == SPIx_DFF_16BIT){
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	0adb      	lsrs	r3, r3, #11
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	2b01      	cmp	r3, #1
 8001028:	d110      	bne.n	800104c <SPI_RX_ISR+0x3a>
		*(uint16_t*)pSPIx_Handle->pRxBuffer = pSPIx_Handle->pSPIx->SPI_DR;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	68da      	ldr	r2, [r3, #12]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	b292      	uxth	r2, r2
 8001036:	801a      	strh	r2, [r3, #0]
		pSPIx_Handle->RxLen =- 2;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f06f 0201 	mvn.w	r2, #1
 800103e:	619a      	str	r2, [r3, #24]
		(uint16_t*)pSPIx_Handle->pRxBuffer ++;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	691b      	ldr	r3, [r3, #16]
 8001044:	1c5a      	adds	r2, r3, #1
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	611a      	str	r2, [r3, #16]
 800104a:	e017      	b.n	800107c <SPI_RX_ISR+0x6a>
	}
	else if((pSPIx_Handle->pSPIx->SPI_CR1 & (1 << SPIx_REG_DFF)) == SPIx_DFF_8BIT){
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001056:	2b00      	cmp	r3, #0
 8001058:	d110      	bne.n	800107c <SPI_RX_ISR+0x6a>
		*pSPIx_Handle->pRxBuffer = pSPIx_Handle->pSPIx->SPI_DR;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	68da      	ldr	r2, [r3, #12]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	691b      	ldr	r3, [r3, #16]
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	701a      	strb	r2, [r3, #0]
		pSPIx_Handle->RxLen --;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	1e5a      	subs	r2, r3, #1
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	619a      	str	r2, [r3, #24]
		pSPIx_Handle->pRxBuffer ++;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	1c5a      	adds	r2, r3, #1
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	611a      	str	r2, [r3, #16]
	}
	if(! pSPIx_Handle->RxLen){
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d106      	bne.n	8001092 <SPI_RX_ISR+0x80>
		SPI_ApplicationCallback(pSPIx_Handle, SPI_EVENT_RX_CMPLT);
 8001084:	2102      	movs	r1, #2
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f000 f8b0 	bl	80011ec <SPI_ApplicationCallback>
		SPI_CloseReception(pSPIx_Handle);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f000 f833 	bl	80010f8 <SPI_CloseReception>
	}
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <SPI_OVR_ISR>:
 * @return						- none
 *
 * @Note						- none
 *
 */
static void SPI_OVR_ISR(SPIx_Handle_t *pSPIx_Handle){
 800109a:	b580      	push	{r7, lr}
 800109c:	b084      	sub	sp, #16
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]

	uint8_t temp;
	//Clear ovr flag
	temp = pSPIx_Handle->pSPIx->SPI_DR;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	73fb      	strb	r3, [r7, #15]
	temp = pSPIx_Handle->pSPIx->SPI_DR;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	73fb      	strb	r3, [r7, #15]

	(void)temp;
	//inform the application
	SPI_ApplicationCallback(pSPIx_Handle, SPI_EVENT_OVR_ERR);
 80010b2:	2103      	movs	r1, #3
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 f899 	bl	80011ec <SPI_ApplicationCallback>


}
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <SPI_CloseTransmission>:
 * @return						- none
 *
 * @Note						- none
 *
 */
void SPI_CloseTransmission(SPIx_Handle_t *pSPIx_Handle){
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]

	//Clear the SPI flags and registers
	pSPIx_Handle->pSPIx->SPI_CR2 &= ~(1 << SPIx_REG_TXEIE);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010d8:	605a      	str	r2, [r3, #4]
	pSPIx_Handle->pTxBuffer = NULL;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	60da      	str	r2, [r3, #12]
	pSPIx_Handle->TxStat = SPIx_READY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	771a      	strb	r2, [r3, #28]
	pSPIx_Handle->TxLen = 0;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	615a      	str	r2, [r3, #20]

}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <SPI_CloseReception>:
 * @return						- none
 *
 * @Note						- none
 *
 */
void SPI_CloseReception(SPIx_Handle_t *pSPIx_Handle){
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

	pSPIx_Handle->pSPIx->SPI_CR2 &= ~(1<<SPIx_REG_RXNEIE);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800110e:	605a      	str	r2, [r3, #4]
	pSPIx_Handle->pRxBuffer = NULL;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
	pSPIx_Handle->RxStat = SPIx_READY;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	775a      	strb	r2, [r3, #29]
	pSPIx_Handle->RxLen = 0;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	619a      	str	r2, [r3, #24]

}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <main>:

SPIx_Handle_t SPI2;
uint8_t recieved;
uint8_t startCommand = 0x50;

int main(void){
 800112e:	b580      	push	{r7, lr}
 8001130:	af00      	add	r7, sp, #0

	SpiPinConf();
 8001132:	f000 f8a3 	bl	800127c <SpiPinConf>
	ButtonPinConf();
 8001136:	f000 f8cf 	bl	80012d8 <ButtonPinConf>
	LEDPinConf();
 800113a:	f000 f8eb 	bl	8001314 <LEDPinConf>

	SpiInterfaceConf();
 800113e:	f000 f801 	bl	8001144 <SpiInterfaceConf>

	while(1){
 8001142:	e7fe      	b.n	8001142 <main+0x14>

08001144 <SpiInterfaceConf>:

	return 0;

}

void SpiInterfaceConf(void){
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0

	SPI2.pSPIx = DISC_SPI2I2S2;
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <SpiInterfaceConf+0x50>)
 800114a:	4a13      	ldr	r2, [pc, #76]	; (8001198 <SpiInterfaceConf+0x54>)
 800114c:	601a      	str	r2, [r3, #0]

	SPI2.SPIx_PinConfig.SPIx_BusConfig = SPIx_BUSCONFG_FULLDUPLEX;
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <SpiInterfaceConf+0x50>)
 8001150:	2201      	movs	r2, #1
 8001152:	715a      	strb	r2, [r3, #5]
	SPI2.SPIx_PinConfig.SPIx_CPHA = SPIx_CPHA_LOW;
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <SpiInterfaceConf+0x50>)
 8001156:	2200      	movs	r2, #0
 8001158:	725a      	strb	r2, [r3, #9]
	SPI2.SPIx_PinConfig.SPIx_CPOL = SPIx_CPOL_LEAD;
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <SpiInterfaceConf+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	721a      	strb	r2, [r3, #8]
	SPI2.SPIx_PinConfig.SPIx_DFF = SPIx_DFF_8BIT;
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <SpiInterfaceConf+0x50>)
 8001162:	2200      	movs	r2, #0
 8001164:	71da      	strb	r2, [r3, #7]
	SPI2.SPIx_PinConfig.SPIx_DeviceMode = SPIx_DEVICEMODE_MASTER;
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <SpiInterfaceConf+0x50>)
 8001168:	2201      	movs	r2, #1
 800116a:	711a      	strb	r2, [r3, #4]
	SPI2.SPIx_PinConfig.SPIx_SCLKSpeed = SPIx_SCLKSPEED_DIV2; //8MHz
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <SpiInterfaceConf+0x50>)
 800116e:	2200      	movs	r2, #0
 8001170:	719a      	strb	r2, [r3, #6]
	SPI2.SPIx_PinConfig.SPIx_SSM = SPIx_SSM_HSM;
 8001172:	4b08      	ldr	r3, [pc, #32]	; (8001194 <SpiInterfaceConf+0x50>)
 8001174:	2200      	movs	r2, #0
 8001176:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI2);
 8001178:	4806      	ldr	r0, [pc, #24]	; (8001194 <SpiInterfaceConf+0x50>)
 800117a:	f7ff fcd9 	bl	8000b30 <SPI_Init>

	SPI_IRQConfig(DISC_SPIx_IRQ(2), DISC_IRQPRIORITY_15, ENABLE);
 800117e:	2201      	movs	r2, #1
 8001180:	210f      	movs	r1, #15
 8001182:	2024      	movs	r0, #36	; 0x24
 8001184:	f7ff fe02 	bl	8000d8c <SPI_IRQConfig>
	SPI_Status(DISC_SPI2I2S2, ENABLE);
 8001188:	2101      	movs	r1, #1
 800118a:	4803      	ldr	r0, [pc, #12]	; (8001198 <SpiInterfaceConf+0x54>)
 800118c:	f7ff fd96 	bl	8000cbc <SPI_Status>

}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000084 	.word	0x20000084
 8001198:	40003800 	.word	0x40003800

0800119c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void){
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0

	GPIO_IRQHandle(BUTTON_PIN_NO);
 80011a0:	2000      	movs	r0, #0
 80011a2:	f7ff fc05 	bl	80009b0 <GPIO_IRQHandle>
	GPIO_TogglePin(DISC_GPIOD, LED_PIN_NO);
 80011a6:	210c      	movs	r1, #12
 80011a8:	4807      	ldr	r0, [pc, #28]	; (80011c8 <EXTI0_IRQHandler+0x2c>)
 80011aa:	f7ff fb37 	bl	800081c <GPIO_TogglePin>

	SPI_SendDataIT(&SPI2, &startCommand, 1);
 80011ae:	2201      	movs	r2, #1
 80011b0:	4906      	ldr	r1, [pc, #24]	; (80011cc <EXTI0_IRQHandler+0x30>)
 80011b2:	4807      	ldr	r0, [pc, #28]	; (80011d0 <EXTI0_IRQHandler+0x34>)
 80011b4:	f7ff fda1 	bl	8000cfa <SPI_SendDataIT>
	SPI_RecieveDataIT(&SPI2, &recieved, 1);
 80011b8:	2201      	movs	r2, #1
 80011ba:	4906      	ldr	r1, [pc, #24]	; (80011d4 <EXTI0_IRQHandler+0x38>)
 80011bc:	4804      	ldr	r0, [pc, #16]	; (80011d0 <EXTI0_IRQHandler+0x34>)
 80011be:	f7ff fdc0 	bl	8000d42 <SPI_RecieveDataIT>

}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40020c00 	.word	0x40020c00
 80011cc:	20000000 	.word	0x20000000
 80011d0:	20000084 	.word	0x20000084
 80011d4:	200000a4 	.word	0x200000a4

080011d8 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void){
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	SPI_IRQHandle(&SPI2);
 80011dc:	4802      	ldr	r0, [pc, #8]	; (80011e8 <SPI2_IRQHandler+0x10>)
 80011de:	f7ff fe89 	bl	8000ef4 <SPI_IRQHandle>
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000084 	.word	0x20000084

080011ec <SPI_ApplicationCallback>:

void SPI_ApplicationCallback(SPIx_Handle_t *pSPIx_Handle, uint8_t event){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	70fb      	strb	r3, [r7, #3]

	if(event == SPI_EVENT_RX_CMPLT){
 80011f8:	78fb      	ldrb	r3, [r7, #3]
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d10e      	bne.n	800121c <SPI_ApplicationCallback+0x30>
		recieved = ParseData(pSPIx_Handle);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 f816 	bl	8001230 <ParseData>
 8001204:	4603      	mov	r3, r0
 8001206:	461a      	mov	r2, r3
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <SPI_ApplicationCallback+0x38>)
 800120a:	701a      	strb	r2, [r3, #0]
		printf("Rcvd data = ");
 800120c:	4806      	ldr	r0, [pc, #24]	; (8001228 <SPI_ApplicationCallback+0x3c>)
 800120e:	f000 f99b 	bl	8001548 <iprintf>
		SPI_RecieveDataIT(&SPI2, &recieved, 1);
 8001212:	2201      	movs	r2, #1
 8001214:	4903      	ldr	r1, [pc, #12]	; (8001224 <SPI_ApplicationCallback+0x38>)
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <SPI_ApplicationCallback+0x40>)
 8001218:	f7ff fd93 	bl	8000d42 <SPI_RecieveDataIT>

	}
	else if(event == SPI_EVENT_OVR_ERR){

	}
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	200000a4 	.word	0x200000a4
 8001228:	0800247c 	.word	0x0800247c
 800122c:	20000084 	.word	0x20000084

08001230 <ParseData>:

uint8_t ParseData(SPIx_Handle_t *pSPIx_Handle){
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]

	uint8_t RxBuffer = *pSPIx_Handle->pRxBuffer;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	691b      	ldr	r3, [r3, #16]
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	73fb      	strb	r3, [r7, #15]

	switch(RxBuffer){
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	2b62      	cmp	r3, #98	; 0x62
 8001244:	d00c      	beq.n	8001260 <ParseData+0x30>
 8001246:	2b62      	cmp	r3, #98	; 0x62
 8001248:	dc0d      	bgt.n	8001266 <ParseData+0x36>
 800124a:	2b60      	cmp	r3, #96	; 0x60
 800124c:	d002      	beq.n	8001254 <ParseData+0x24>
 800124e:	2b61      	cmp	r3, #97	; 0x61
 8001250:	d003      	beq.n	800125a <ParseData+0x2a>
 8001252:	e008      	b.n	8001266 <ParseData+0x36>
	case 0x60:
		RxBuffer = COMMAND_RCV_ACK;
 8001254:	2300      	movs	r3, #0
 8001256:	73fb      	strb	r3, [r7, #15]
		break;
 8001258:	e008      	b.n	800126c <ParseData+0x3c>
	case 0x61:
		RxBuffer = COMMAND_RCV_NACK;
 800125a:	2301      	movs	r3, #1
 800125c:	73fb      	strb	r3, [r7, #15]
		break;
 800125e:	e005      	b.n	800126c <ParseData+0x3c>
	case 0x62:
		RxBuffer = COMMAND_RCV_GOOD;
 8001260:	2302      	movs	r3, #2
 8001262:	73fb      	strb	r3, [r7, #15]
		break;
 8001264:	e002      	b.n	800126c <ParseData+0x3c>
	default:
		RxBuffer = COMMAND_RCV_ERR;
 8001266:	2303      	movs	r3, #3
 8001268:	73fb      	strb	r3, [r7, #15]
		break;
 800126a:	bf00      	nop
	}
	return RxBuffer;
 800126c:	7bfb      	ldrb	r3, [r7, #15]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <SpiPinConf>:




void SpiPinConf(void){
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0

	GPIOx_Handle_t SPI_PIN;

	SPI_PIN.pGPIOx = DISC_GPIOB;
 8001282:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <SpiPinConf+0x58>)
 8001284:	607b      	str	r3, [r7, #4]

	SPI_PIN.GPIOx_PinConfig.GPIOx_PinMode = GPIOx_PINMODE_ALT;
 8001286:	2302      	movs	r3, #2
 8001288:	727b      	strb	r3, [r7, #9]
	SPI_PIN.GPIOx_PinConfig.GPIOx_PinAltMode = GPIOx_AF_5;
 800128a:	2305      	movs	r3, #5
 800128c:	737b      	strb	r3, [r7, #13]
	SPI_PIN.GPIOx_PinConfig.GPIOx_PinOutType = GPIOx_PINOUTTYPE_PP;
 800128e:	2300      	movs	r3, #0
 8001290:	733b      	strb	r3, [r7, #12]
	SPI_PIN.GPIOx_PinConfig.GPIOx_PinResControl = GPIOx_PINRESCONTROL_PU;
 8001292:	2301      	movs	r3, #1
 8001294:	72fb      	strb	r3, [r7, #11]
	SPI_PIN.GPIOx_PinConfig.GPIOx_PinSpeed = GPIOx_PINSPEED_M;
 8001296:	2301      	movs	r3, #1
 8001298:	72bb      	strb	r3, [r7, #10]

	//MISO
	SPI_PIN.GPIOx_PinConfig.GPIOx_PinNo = GPIOx_PINNO_15;
 800129a:	230f      	movs	r3, #15
 800129c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_PIN);
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f90d 	bl	80004c0 <GPIO_Init>

	//MOSI
	SPI_PIN.GPIOx_PinConfig.GPIOx_PinNo = GPIOx_PINNO_14;
 80012a6:	230e      	movs	r3, #14
 80012a8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_PIN);
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff f907 	bl	80004c0 <GPIO_Init>

	//NSS
	SPI_PIN.GPIOx_PinConfig.GPIOx_PinNo = GPIOx_PINNO_12;
 80012b2:	230c      	movs	r3, #12
 80012b4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_PIN);
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff f901 	bl	80004c0 <GPIO_Init>

	//SCLK
	SPI_PIN.GPIOx_PinConfig.GPIOx_PinNo = GPIOx_PINNO_13;
 80012be:	230d      	movs	r3, #13
 80012c0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_PIN);
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff f8fb 	bl	80004c0 <GPIO_Init>

}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40020400 	.word	0x40020400

080012d8 <ButtonPinConf>:

void ButtonPinConf(void){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0

	GPIOx_Handle_t BUTTON_PIN;

	BUTTON_PIN.pGPIOx = DISC_GPIOA;
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <ButtonPinConf+0x38>)
 80012e0:	607b      	str	r3, [r7, #4]

	BUTTON_PIN.GPIOx_PinConfig.GPIOx_PinMode = GPIOx_PINMODE_INT_RET;
 80012e2:	2305      	movs	r3, #5
 80012e4:	727b      	strb	r3, [r7, #9]
	BUTTON_PIN.GPIOx_PinConfig.GPIOx_PinOutType = GPIOx_PINOUTTYPE_PP;
 80012e6:	2300      	movs	r3, #0
 80012e8:	733b      	strb	r3, [r7, #12]
	BUTTON_PIN.GPIOx_PinConfig.GPIOx_PinResControl = GPIOx_PINRESCONTROL_PD;
 80012ea:	2302      	movs	r3, #2
 80012ec:	72fb      	strb	r3, [r7, #11]
	BUTTON_PIN.GPIOx_PinConfig.GPIOx_PinSpeed = GPIOx_PINSPEED_M;
 80012ee:	2301      	movs	r3, #1
 80012f0:	72bb      	strb	r3, [r7, #10]


	BUTTON_PIN.GPIOx_PinConfig.GPIOx_PinNo = BUTTON_PIN_NO;
 80012f2:	2300      	movs	r3, #0
 80012f4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&BUTTON_PIN);
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f8e1 	bl	80004c0 <GPIO_Init>

	GPIO_IRQConfig(DISC_EXTIx_IRQ(0), DISC_IRQPRIORITY_10, ENABLE);
 80012fe:	2201      	movs	r2, #1
 8001300:	210a      	movs	r1, #10
 8001302:	2006      	movs	r0, #6
 8001304:	f7ff faa0 	bl	8000848 <GPIO_IRQConfig>

}
 8001308:	bf00      	nop
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40020000 	.word	0x40020000

08001314 <LEDPinConf>:

void LEDPinConf(void){
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0

	GPIOx_Handle_t LED_PIN;

	LED_PIN.pGPIOx = DISC_GPIOD;
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <LEDPinConf+0x30>)
 800131c:	607b      	str	r3, [r7, #4]

	LED_PIN.GPIOx_PinConfig.GPIOx_PinMode = GPIOx_PINMODE_OUTPUT;
 800131e:	2301      	movs	r3, #1
 8001320:	727b      	strb	r3, [r7, #9]
	LED_PIN.GPIOx_PinConfig.GPIOx_PinOutType = GPIOx_PINOUTTYPE_PP;
 8001322:	2300      	movs	r3, #0
 8001324:	733b      	strb	r3, [r7, #12]
	LED_PIN.GPIOx_PinConfig.GPIOx_PinResControl = GPIOx_PINRESCONTROL_PD;
 8001326:	2302      	movs	r3, #2
 8001328:	72fb      	strb	r3, [r7, #11]
	LED_PIN.GPIOx_PinConfig.GPIOx_PinSpeed = GPIOx_PINSPEED_M;
 800132a:	2301      	movs	r3, #1
 800132c:	72bb      	strb	r3, [r7, #10]


	LED_PIN.GPIOx_PinConfig.GPIOx_PinNo = LED_PIN_NO;
 800132e:	230c      	movs	r3, #12
 8001330:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&LED_PIN);
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff f8c3 	bl	80004c0 <GPIO_Init>

}
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40020c00 	.word	0x40020c00

08001348 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	e00a      	b.n	8001370 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800135a:	f3af 8000 	nop.w
 800135e:	4601      	mov	r1, r0
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	1c5a      	adds	r2, r3, #1
 8001364:	60ba      	str	r2, [r7, #8]
 8001366:	b2ca      	uxtb	r2, r1
 8001368:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	3301      	adds	r3, #1
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	697a      	ldr	r2, [r7, #20]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	429a      	cmp	r2, r3
 8001376:	dbf0      	blt.n	800135a <_read+0x12>
	}

return len;
 8001378:	687b      	ldr	r3, [r7, #4]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b086      	sub	sp, #24
 8001386:	af00      	add	r7, sp, #0
 8001388:	60f8      	str	r0, [r7, #12]
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	e009      	b.n	80013a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	1c5a      	adds	r2, r3, #1
 8001398:	60ba      	str	r2, [r7, #8]
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	3301      	adds	r3, #1
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	dbf1      	blt.n	8001394 <_write+0x12>
	}
	return len;
 80013b0:	687b      	ldr	r3, [r7, #4]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <_close>:

int _close(int file)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
	return -1;
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013e2:	605a      	str	r2, [r3, #4]
	return 0;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <_isatty>:

int _isatty(int file)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
	return 1;
 80013fa:	2301      	movs	r3, #1
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
	return 0;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800142c:	4a14      	ldr	r2, [pc, #80]	; (8001480 <_sbrk+0x5c>)
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <_sbrk+0x60>)
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001438:	4b13      	ldr	r3, [pc, #76]	; (8001488 <_sbrk+0x64>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <_sbrk+0x64>)
 8001442:	4a12      	ldr	r2, [pc, #72]	; (800148c <_sbrk+0x68>)
 8001444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <_sbrk+0x64>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	429a      	cmp	r2, r3
 8001452:	d207      	bcs.n	8001464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001454:	f000 f846 	bl	80014e4 <__errno>
 8001458:	4603      	mov	r3, r0
 800145a:	220c      	movs	r2, #12
 800145c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800145e:	f04f 33ff 	mov.w	r3, #4294967295
 8001462:	e009      	b.n	8001478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <_sbrk+0x64>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800146a:	4b07      	ldr	r3, [pc, #28]	; (8001488 <_sbrk+0x64>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	4a05      	ldr	r2, [pc, #20]	; (8001488 <_sbrk+0x64>)
 8001474:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001476:	68fb      	ldr	r3, [r7, #12]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20020000 	.word	0x20020000
 8001484:	00000400 	.word	0x00000400
 8001488:	200000a8 	.word	0x200000a8
 800148c:	200000c0 	.word	0x200000c0

08001490 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001490:	480d      	ldr	r0, [pc, #52]	; (80014c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001492:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001494:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001498:	480c      	ldr	r0, [pc, #48]	; (80014cc <LoopForever+0x6>)
  ldr r1, =_edata
 800149a:	490d      	ldr	r1, [pc, #52]	; (80014d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800149c:	4a0d      	ldr	r2, [pc, #52]	; (80014d4 <LoopForever+0xe>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a0:	e002      	b.n	80014a8 <LoopCopyDataInit>

080014a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a6:	3304      	adds	r3, #4

080014a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ac:	d3f9      	bcc.n	80014a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ae:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014b0:	4c0a      	ldr	r4, [pc, #40]	; (80014dc <LoopForever+0x16>)
  movs r3, #0
 80014b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b4:	e001      	b.n	80014ba <LoopFillZerobss>

080014b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b8:	3204      	adds	r2, #4

080014ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014bc:	d3fb      	bcc.n	80014b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80014be:	f000 f817 	bl	80014f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014c2:	f7ff fe34 	bl	800112e <main>

080014c6 <LoopForever>:

LoopForever:
    b LoopForever
 80014c6:	e7fe      	b.n	80014c6 <LoopForever>
  ldr   r0, =_estack
 80014c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80014d4:	0800252c 	.word	0x0800252c
  ldr r2, =_sbss
 80014d8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80014dc:	200000bc 	.word	0x200000bc

080014e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014e0:	e7fe      	b.n	80014e0 <ADC_IRQHandler>
	...

080014e4 <__errno>:
 80014e4:	4b01      	ldr	r3, [pc, #4]	; (80014ec <__errno+0x8>)
 80014e6:	6818      	ldr	r0, [r3, #0]
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	20000004 	.word	0x20000004

080014f0 <__libc_init_array>:
 80014f0:	b570      	push	{r4, r5, r6, lr}
 80014f2:	4d0d      	ldr	r5, [pc, #52]	; (8001528 <__libc_init_array+0x38>)
 80014f4:	4c0d      	ldr	r4, [pc, #52]	; (800152c <__libc_init_array+0x3c>)
 80014f6:	1b64      	subs	r4, r4, r5
 80014f8:	10a4      	asrs	r4, r4, #2
 80014fa:	2600      	movs	r6, #0
 80014fc:	42a6      	cmp	r6, r4
 80014fe:	d109      	bne.n	8001514 <__libc_init_array+0x24>
 8001500:	4d0b      	ldr	r5, [pc, #44]	; (8001530 <__libc_init_array+0x40>)
 8001502:	4c0c      	ldr	r4, [pc, #48]	; (8001534 <__libc_init_array+0x44>)
 8001504:	f000 ffae 	bl	8002464 <_init>
 8001508:	1b64      	subs	r4, r4, r5
 800150a:	10a4      	asrs	r4, r4, #2
 800150c:	2600      	movs	r6, #0
 800150e:	42a6      	cmp	r6, r4
 8001510:	d105      	bne.n	800151e <__libc_init_array+0x2e>
 8001512:	bd70      	pop	{r4, r5, r6, pc}
 8001514:	f855 3b04 	ldr.w	r3, [r5], #4
 8001518:	4798      	blx	r3
 800151a:	3601      	adds	r6, #1
 800151c:	e7ee      	b.n	80014fc <__libc_init_array+0xc>
 800151e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001522:	4798      	blx	r3
 8001524:	3601      	adds	r6, #1
 8001526:	e7f2      	b.n	800150e <__libc_init_array+0x1e>
 8001528:	08002524 	.word	0x08002524
 800152c:	08002524 	.word	0x08002524
 8001530:	08002524 	.word	0x08002524
 8001534:	08002528 	.word	0x08002528

08001538 <memset>:
 8001538:	4402      	add	r2, r0
 800153a:	4603      	mov	r3, r0
 800153c:	4293      	cmp	r3, r2
 800153e:	d100      	bne.n	8001542 <memset+0xa>
 8001540:	4770      	bx	lr
 8001542:	f803 1b01 	strb.w	r1, [r3], #1
 8001546:	e7f9      	b.n	800153c <memset+0x4>

08001548 <iprintf>:
 8001548:	b40f      	push	{r0, r1, r2, r3}
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <iprintf+0x2c>)
 800154c:	b513      	push	{r0, r1, r4, lr}
 800154e:	681c      	ldr	r4, [r3, #0]
 8001550:	b124      	cbz	r4, 800155c <iprintf+0x14>
 8001552:	69a3      	ldr	r3, [r4, #24]
 8001554:	b913      	cbnz	r3, 800155c <iprintf+0x14>
 8001556:	4620      	mov	r0, r4
 8001558:	f000 f866 	bl	8001628 <__sinit>
 800155c:	ab05      	add	r3, sp, #20
 800155e:	9a04      	ldr	r2, [sp, #16]
 8001560:	68a1      	ldr	r1, [r4, #8]
 8001562:	9301      	str	r3, [sp, #4]
 8001564:	4620      	mov	r0, r4
 8001566:	f000 f9bd 	bl	80018e4 <_vfiprintf_r>
 800156a:	b002      	add	sp, #8
 800156c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001570:	b004      	add	sp, #16
 8001572:	4770      	bx	lr
 8001574:	20000004 	.word	0x20000004

08001578 <std>:
 8001578:	2300      	movs	r3, #0
 800157a:	b510      	push	{r4, lr}
 800157c:	4604      	mov	r4, r0
 800157e:	e9c0 3300 	strd	r3, r3, [r0]
 8001582:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001586:	6083      	str	r3, [r0, #8]
 8001588:	8181      	strh	r1, [r0, #12]
 800158a:	6643      	str	r3, [r0, #100]	; 0x64
 800158c:	81c2      	strh	r2, [r0, #14]
 800158e:	6183      	str	r3, [r0, #24]
 8001590:	4619      	mov	r1, r3
 8001592:	2208      	movs	r2, #8
 8001594:	305c      	adds	r0, #92	; 0x5c
 8001596:	f7ff ffcf 	bl	8001538 <memset>
 800159a:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <std+0x38>)
 800159c:	6263      	str	r3, [r4, #36]	; 0x24
 800159e:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <std+0x3c>)
 80015a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <std+0x40>)
 80015a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80015a6:	4b05      	ldr	r3, [pc, #20]	; (80015bc <std+0x44>)
 80015a8:	6224      	str	r4, [r4, #32]
 80015aa:	6323      	str	r3, [r4, #48]	; 0x30
 80015ac:	bd10      	pop	{r4, pc}
 80015ae:	bf00      	nop
 80015b0:	08001e8d 	.word	0x08001e8d
 80015b4:	08001eaf 	.word	0x08001eaf
 80015b8:	08001ee7 	.word	0x08001ee7
 80015bc:	08001f0b 	.word	0x08001f0b

080015c0 <_cleanup_r>:
 80015c0:	4901      	ldr	r1, [pc, #4]	; (80015c8 <_cleanup_r+0x8>)
 80015c2:	f000 b8af 	b.w	8001724 <_fwalk_reent>
 80015c6:	bf00      	nop
 80015c8:	080021e5 	.word	0x080021e5

080015cc <__sfmoreglue>:
 80015cc:	b570      	push	{r4, r5, r6, lr}
 80015ce:	2268      	movs	r2, #104	; 0x68
 80015d0:	1e4d      	subs	r5, r1, #1
 80015d2:	4355      	muls	r5, r2
 80015d4:	460e      	mov	r6, r1
 80015d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80015da:	f000 f8e5 	bl	80017a8 <_malloc_r>
 80015de:	4604      	mov	r4, r0
 80015e0:	b140      	cbz	r0, 80015f4 <__sfmoreglue+0x28>
 80015e2:	2100      	movs	r1, #0
 80015e4:	e9c0 1600 	strd	r1, r6, [r0]
 80015e8:	300c      	adds	r0, #12
 80015ea:	60a0      	str	r0, [r4, #8]
 80015ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80015f0:	f7ff ffa2 	bl	8001538 <memset>
 80015f4:	4620      	mov	r0, r4
 80015f6:	bd70      	pop	{r4, r5, r6, pc}

080015f8 <__sfp_lock_acquire>:
 80015f8:	4801      	ldr	r0, [pc, #4]	; (8001600 <__sfp_lock_acquire+0x8>)
 80015fa:	f000 b8b3 	b.w	8001764 <__retarget_lock_acquire_recursive>
 80015fe:	bf00      	nop
 8001600:	200000ad 	.word	0x200000ad

08001604 <__sfp_lock_release>:
 8001604:	4801      	ldr	r0, [pc, #4]	; (800160c <__sfp_lock_release+0x8>)
 8001606:	f000 b8ae 	b.w	8001766 <__retarget_lock_release_recursive>
 800160a:	bf00      	nop
 800160c:	200000ad 	.word	0x200000ad

08001610 <__sinit_lock_acquire>:
 8001610:	4801      	ldr	r0, [pc, #4]	; (8001618 <__sinit_lock_acquire+0x8>)
 8001612:	f000 b8a7 	b.w	8001764 <__retarget_lock_acquire_recursive>
 8001616:	bf00      	nop
 8001618:	200000ae 	.word	0x200000ae

0800161c <__sinit_lock_release>:
 800161c:	4801      	ldr	r0, [pc, #4]	; (8001624 <__sinit_lock_release+0x8>)
 800161e:	f000 b8a2 	b.w	8001766 <__retarget_lock_release_recursive>
 8001622:	bf00      	nop
 8001624:	200000ae 	.word	0x200000ae

08001628 <__sinit>:
 8001628:	b510      	push	{r4, lr}
 800162a:	4604      	mov	r4, r0
 800162c:	f7ff fff0 	bl	8001610 <__sinit_lock_acquire>
 8001630:	69a3      	ldr	r3, [r4, #24]
 8001632:	b11b      	cbz	r3, 800163c <__sinit+0x14>
 8001634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001638:	f7ff bff0 	b.w	800161c <__sinit_lock_release>
 800163c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001640:	6523      	str	r3, [r4, #80]	; 0x50
 8001642:	4b13      	ldr	r3, [pc, #76]	; (8001690 <__sinit+0x68>)
 8001644:	4a13      	ldr	r2, [pc, #76]	; (8001694 <__sinit+0x6c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	62a2      	str	r2, [r4, #40]	; 0x28
 800164a:	42a3      	cmp	r3, r4
 800164c:	bf04      	itt	eq
 800164e:	2301      	moveq	r3, #1
 8001650:	61a3      	streq	r3, [r4, #24]
 8001652:	4620      	mov	r0, r4
 8001654:	f000 f820 	bl	8001698 <__sfp>
 8001658:	6060      	str	r0, [r4, #4]
 800165a:	4620      	mov	r0, r4
 800165c:	f000 f81c 	bl	8001698 <__sfp>
 8001660:	60a0      	str	r0, [r4, #8]
 8001662:	4620      	mov	r0, r4
 8001664:	f000 f818 	bl	8001698 <__sfp>
 8001668:	2200      	movs	r2, #0
 800166a:	60e0      	str	r0, [r4, #12]
 800166c:	2104      	movs	r1, #4
 800166e:	6860      	ldr	r0, [r4, #4]
 8001670:	f7ff ff82 	bl	8001578 <std>
 8001674:	68a0      	ldr	r0, [r4, #8]
 8001676:	2201      	movs	r2, #1
 8001678:	2109      	movs	r1, #9
 800167a:	f7ff ff7d 	bl	8001578 <std>
 800167e:	68e0      	ldr	r0, [r4, #12]
 8001680:	2202      	movs	r2, #2
 8001682:	2112      	movs	r1, #18
 8001684:	f7ff ff78 	bl	8001578 <std>
 8001688:	2301      	movs	r3, #1
 800168a:	61a3      	str	r3, [r4, #24]
 800168c:	e7d2      	b.n	8001634 <__sinit+0xc>
 800168e:	bf00      	nop
 8001690:	0800248c 	.word	0x0800248c
 8001694:	080015c1 	.word	0x080015c1

08001698 <__sfp>:
 8001698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800169a:	4607      	mov	r7, r0
 800169c:	f7ff ffac 	bl	80015f8 <__sfp_lock_acquire>
 80016a0:	4b1e      	ldr	r3, [pc, #120]	; (800171c <__sfp+0x84>)
 80016a2:	681e      	ldr	r6, [r3, #0]
 80016a4:	69b3      	ldr	r3, [r6, #24]
 80016a6:	b913      	cbnz	r3, 80016ae <__sfp+0x16>
 80016a8:	4630      	mov	r0, r6
 80016aa:	f7ff ffbd 	bl	8001628 <__sinit>
 80016ae:	3648      	adds	r6, #72	; 0x48
 80016b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	d503      	bpl.n	80016c0 <__sfp+0x28>
 80016b8:	6833      	ldr	r3, [r6, #0]
 80016ba:	b30b      	cbz	r3, 8001700 <__sfp+0x68>
 80016bc:	6836      	ldr	r6, [r6, #0]
 80016be:	e7f7      	b.n	80016b0 <__sfp+0x18>
 80016c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80016c4:	b9d5      	cbnz	r5, 80016fc <__sfp+0x64>
 80016c6:	4b16      	ldr	r3, [pc, #88]	; (8001720 <__sfp+0x88>)
 80016c8:	60e3      	str	r3, [r4, #12]
 80016ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80016ce:	6665      	str	r5, [r4, #100]	; 0x64
 80016d0:	f000 f847 	bl	8001762 <__retarget_lock_init_recursive>
 80016d4:	f7ff ff96 	bl	8001604 <__sfp_lock_release>
 80016d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80016dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80016e0:	6025      	str	r5, [r4, #0]
 80016e2:	61a5      	str	r5, [r4, #24]
 80016e4:	2208      	movs	r2, #8
 80016e6:	4629      	mov	r1, r5
 80016e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80016ec:	f7ff ff24 	bl	8001538 <memset>
 80016f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80016f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80016f8:	4620      	mov	r0, r4
 80016fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016fc:	3468      	adds	r4, #104	; 0x68
 80016fe:	e7d9      	b.n	80016b4 <__sfp+0x1c>
 8001700:	2104      	movs	r1, #4
 8001702:	4638      	mov	r0, r7
 8001704:	f7ff ff62 	bl	80015cc <__sfmoreglue>
 8001708:	4604      	mov	r4, r0
 800170a:	6030      	str	r0, [r6, #0]
 800170c:	2800      	cmp	r0, #0
 800170e:	d1d5      	bne.n	80016bc <__sfp+0x24>
 8001710:	f7ff ff78 	bl	8001604 <__sfp_lock_release>
 8001714:	230c      	movs	r3, #12
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	e7ee      	b.n	80016f8 <__sfp+0x60>
 800171a:	bf00      	nop
 800171c:	0800248c 	.word	0x0800248c
 8001720:	ffff0001 	.word	0xffff0001

08001724 <_fwalk_reent>:
 8001724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001728:	4606      	mov	r6, r0
 800172a:	4688      	mov	r8, r1
 800172c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001730:	2700      	movs	r7, #0
 8001732:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001736:	f1b9 0901 	subs.w	r9, r9, #1
 800173a:	d505      	bpl.n	8001748 <_fwalk_reent+0x24>
 800173c:	6824      	ldr	r4, [r4, #0]
 800173e:	2c00      	cmp	r4, #0
 8001740:	d1f7      	bne.n	8001732 <_fwalk_reent+0xe>
 8001742:	4638      	mov	r0, r7
 8001744:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001748:	89ab      	ldrh	r3, [r5, #12]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d907      	bls.n	800175e <_fwalk_reent+0x3a>
 800174e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001752:	3301      	adds	r3, #1
 8001754:	d003      	beq.n	800175e <_fwalk_reent+0x3a>
 8001756:	4629      	mov	r1, r5
 8001758:	4630      	mov	r0, r6
 800175a:	47c0      	blx	r8
 800175c:	4307      	orrs	r7, r0
 800175e:	3568      	adds	r5, #104	; 0x68
 8001760:	e7e9      	b.n	8001736 <_fwalk_reent+0x12>

08001762 <__retarget_lock_init_recursive>:
 8001762:	4770      	bx	lr

08001764 <__retarget_lock_acquire_recursive>:
 8001764:	4770      	bx	lr

08001766 <__retarget_lock_release_recursive>:
 8001766:	4770      	bx	lr

08001768 <sbrk_aligned>:
 8001768:	b570      	push	{r4, r5, r6, lr}
 800176a:	4e0e      	ldr	r6, [pc, #56]	; (80017a4 <sbrk_aligned+0x3c>)
 800176c:	460c      	mov	r4, r1
 800176e:	6831      	ldr	r1, [r6, #0]
 8001770:	4605      	mov	r5, r0
 8001772:	b911      	cbnz	r1, 800177a <sbrk_aligned+0x12>
 8001774:	f000 fb7a 	bl	8001e6c <_sbrk_r>
 8001778:	6030      	str	r0, [r6, #0]
 800177a:	4621      	mov	r1, r4
 800177c:	4628      	mov	r0, r5
 800177e:	f000 fb75 	bl	8001e6c <_sbrk_r>
 8001782:	1c43      	adds	r3, r0, #1
 8001784:	d00a      	beq.n	800179c <sbrk_aligned+0x34>
 8001786:	1cc4      	adds	r4, r0, #3
 8001788:	f024 0403 	bic.w	r4, r4, #3
 800178c:	42a0      	cmp	r0, r4
 800178e:	d007      	beq.n	80017a0 <sbrk_aligned+0x38>
 8001790:	1a21      	subs	r1, r4, r0
 8001792:	4628      	mov	r0, r5
 8001794:	f000 fb6a 	bl	8001e6c <_sbrk_r>
 8001798:	3001      	adds	r0, #1
 800179a:	d101      	bne.n	80017a0 <sbrk_aligned+0x38>
 800179c:	f04f 34ff 	mov.w	r4, #4294967295
 80017a0:	4620      	mov	r0, r4
 80017a2:	bd70      	pop	{r4, r5, r6, pc}
 80017a4:	200000b4 	.word	0x200000b4

080017a8 <_malloc_r>:
 80017a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017ac:	1ccd      	adds	r5, r1, #3
 80017ae:	f025 0503 	bic.w	r5, r5, #3
 80017b2:	3508      	adds	r5, #8
 80017b4:	2d0c      	cmp	r5, #12
 80017b6:	bf38      	it	cc
 80017b8:	250c      	movcc	r5, #12
 80017ba:	2d00      	cmp	r5, #0
 80017bc:	4607      	mov	r7, r0
 80017be:	db01      	blt.n	80017c4 <_malloc_r+0x1c>
 80017c0:	42a9      	cmp	r1, r5
 80017c2:	d905      	bls.n	80017d0 <_malloc_r+0x28>
 80017c4:	230c      	movs	r3, #12
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	2600      	movs	r6, #0
 80017ca:	4630      	mov	r0, r6
 80017cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017d0:	4e2e      	ldr	r6, [pc, #184]	; (800188c <_malloc_r+0xe4>)
 80017d2:	f000 fdbb 	bl	800234c <__malloc_lock>
 80017d6:	6833      	ldr	r3, [r6, #0]
 80017d8:	461c      	mov	r4, r3
 80017da:	bb34      	cbnz	r4, 800182a <_malloc_r+0x82>
 80017dc:	4629      	mov	r1, r5
 80017de:	4638      	mov	r0, r7
 80017e0:	f7ff ffc2 	bl	8001768 <sbrk_aligned>
 80017e4:	1c43      	adds	r3, r0, #1
 80017e6:	4604      	mov	r4, r0
 80017e8:	d14d      	bne.n	8001886 <_malloc_r+0xde>
 80017ea:	6834      	ldr	r4, [r6, #0]
 80017ec:	4626      	mov	r6, r4
 80017ee:	2e00      	cmp	r6, #0
 80017f0:	d140      	bne.n	8001874 <_malloc_r+0xcc>
 80017f2:	6823      	ldr	r3, [r4, #0]
 80017f4:	4631      	mov	r1, r6
 80017f6:	4638      	mov	r0, r7
 80017f8:	eb04 0803 	add.w	r8, r4, r3
 80017fc:	f000 fb36 	bl	8001e6c <_sbrk_r>
 8001800:	4580      	cmp	r8, r0
 8001802:	d13a      	bne.n	800187a <_malloc_r+0xd2>
 8001804:	6821      	ldr	r1, [r4, #0]
 8001806:	3503      	adds	r5, #3
 8001808:	1a6d      	subs	r5, r5, r1
 800180a:	f025 0503 	bic.w	r5, r5, #3
 800180e:	3508      	adds	r5, #8
 8001810:	2d0c      	cmp	r5, #12
 8001812:	bf38      	it	cc
 8001814:	250c      	movcc	r5, #12
 8001816:	4629      	mov	r1, r5
 8001818:	4638      	mov	r0, r7
 800181a:	f7ff ffa5 	bl	8001768 <sbrk_aligned>
 800181e:	3001      	adds	r0, #1
 8001820:	d02b      	beq.n	800187a <_malloc_r+0xd2>
 8001822:	6823      	ldr	r3, [r4, #0]
 8001824:	442b      	add	r3, r5
 8001826:	6023      	str	r3, [r4, #0]
 8001828:	e00e      	b.n	8001848 <_malloc_r+0xa0>
 800182a:	6822      	ldr	r2, [r4, #0]
 800182c:	1b52      	subs	r2, r2, r5
 800182e:	d41e      	bmi.n	800186e <_malloc_r+0xc6>
 8001830:	2a0b      	cmp	r2, #11
 8001832:	d916      	bls.n	8001862 <_malloc_r+0xba>
 8001834:	1961      	adds	r1, r4, r5
 8001836:	42a3      	cmp	r3, r4
 8001838:	6025      	str	r5, [r4, #0]
 800183a:	bf18      	it	ne
 800183c:	6059      	strne	r1, [r3, #4]
 800183e:	6863      	ldr	r3, [r4, #4]
 8001840:	bf08      	it	eq
 8001842:	6031      	streq	r1, [r6, #0]
 8001844:	5162      	str	r2, [r4, r5]
 8001846:	604b      	str	r3, [r1, #4]
 8001848:	4638      	mov	r0, r7
 800184a:	f104 060b 	add.w	r6, r4, #11
 800184e:	f000 fd83 	bl	8002358 <__malloc_unlock>
 8001852:	f026 0607 	bic.w	r6, r6, #7
 8001856:	1d23      	adds	r3, r4, #4
 8001858:	1af2      	subs	r2, r6, r3
 800185a:	d0b6      	beq.n	80017ca <_malloc_r+0x22>
 800185c:	1b9b      	subs	r3, r3, r6
 800185e:	50a3      	str	r3, [r4, r2]
 8001860:	e7b3      	b.n	80017ca <_malloc_r+0x22>
 8001862:	6862      	ldr	r2, [r4, #4]
 8001864:	42a3      	cmp	r3, r4
 8001866:	bf0c      	ite	eq
 8001868:	6032      	streq	r2, [r6, #0]
 800186a:	605a      	strne	r2, [r3, #4]
 800186c:	e7ec      	b.n	8001848 <_malloc_r+0xa0>
 800186e:	4623      	mov	r3, r4
 8001870:	6864      	ldr	r4, [r4, #4]
 8001872:	e7b2      	b.n	80017da <_malloc_r+0x32>
 8001874:	4634      	mov	r4, r6
 8001876:	6876      	ldr	r6, [r6, #4]
 8001878:	e7b9      	b.n	80017ee <_malloc_r+0x46>
 800187a:	230c      	movs	r3, #12
 800187c:	603b      	str	r3, [r7, #0]
 800187e:	4638      	mov	r0, r7
 8001880:	f000 fd6a 	bl	8002358 <__malloc_unlock>
 8001884:	e7a1      	b.n	80017ca <_malloc_r+0x22>
 8001886:	6025      	str	r5, [r4, #0]
 8001888:	e7de      	b.n	8001848 <_malloc_r+0xa0>
 800188a:	bf00      	nop
 800188c:	200000b0 	.word	0x200000b0

08001890 <__sfputc_r>:
 8001890:	6893      	ldr	r3, [r2, #8]
 8001892:	3b01      	subs	r3, #1
 8001894:	2b00      	cmp	r3, #0
 8001896:	b410      	push	{r4}
 8001898:	6093      	str	r3, [r2, #8]
 800189a:	da08      	bge.n	80018ae <__sfputc_r+0x1e>
 800189c:	6994      	ldr	r4, [r2, #24]
 800189e:	42a3      	cmp	r3, r4
 80018a0:	db01      	blt.n	80018a6 <__sfputc_r+0x16>
 80018a2:	290a      	cmp	r1, #10
 80018a4:	d103      	bne.n	80018ae <__sfputc_r+0x1e>
 80018a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018aa:	f000 bb33 	b.w	8001f14 <__swbuf_r>
 80018ae:	6813      	ldr	r3, [r2, #0]
 80018b0:	1c58      	adds	r0, r3, #1
 80018b2:	6010      	str	r0, [r2, #0]
 80018b4:	7019      	strb	r1, [r3, #0]
 80018b6:	4608      	mov	r0, r1
 80018b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018bc:	4770      	bx	lr

080018be <__sfputs_r>:
 80018be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018c0:	4606      	mov	r6, r0
 80018c2:	460f      	mov	r7, r1
 80018c4:	4614      	mov	r4, r2
 80018c6:	18d5      	adds	r5, r2, r3
 80018c8:	42ac      	cmp	r4, r5
 80018ca:	d101      	bne.n	80018d0 <__sfputs_r+0x12>
 80018cc:	2000      	movs	r0, #0
 80018ce:	e007      	b.n	80018e0 <__sfputs_r+0x22>
 80018d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018d4:	463a      	mov	r2, r7
 80018d6:	4630      	mov	r0, r6
 80018d8:	f7ff ffda 	bl	8001890 <__sfputc_r>
 80018dc:	1c43      	adds	r3, r0, #1
 80018de:	d1f3      	bne.n	80018c8 <__sfputs_r+0xa>
 80018e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080018e4 <_vfiprintf_r>:
 80018e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018e8:	460d      	mov	r5, r1
 80018ea:	b09d      	sub	sp, #116	; 0x74
 80018ec:	4614      	mov	r4, r2
 80018ee:	4698      	mov	r8, r3
 80018f0:	4606      	mov	r6, r0
 80018f2:	b118      	cbz	r0, 80018fc <_vfiprintf_r+0x18>
 80018f4:	6983      	ldr	r3, [r0, #24]
 80018f6:	b90b      	cbnz	r3, 80018fc <_vfiprintf_r+0x18>
 80018f8:	f7ff fe96 	bl	8001628 <__sinit>
 80018fc:	4b89      	ldr	r3, [pc, #548]	; (8001b24 <_vfiprintf_r+0x240>)
 80018fe:	429d      	cmp	r5, r3
 8001900:	d11b      	bne.n	800193a <_vfiprintf_r+0x56>
 8001902:	6875      	ldr	r5, [r6, #4]
 8001904:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001906:	07d9      	lsls	r1, r3, #31
 8001908:	d405      	bmi.n	8001916 <_vfiprintf_r+0x32>
 800190a:	89ab      	ldrh	r3, [r5, #12]
 800190c:	059a      	lsls	r2, r3, #22
 800190e:	d402      	bmi.n	8001916 <_vfiprintf_r+0x32>
 8001910:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001912:	f7ff ff27 	bl	8001764 <__retarget_lock_acquire_recursive>
 8001916:	89ab      	ldrh	r3, [r5, #12]
 8001918:	071b      	lsls	r3, r3, #28
 800191a:	d501      	bpl.n	8001920 <_vfiprintf_r+0x3c>
 800191c:	692b      	ldr	r3, [r5, #16]
 800191e:	b9eb      	cbnz	r3, 800195c <_vfiprintf_r+0x78>
 8001920:	4629      	mov	r1, r5
 8001922:	4630      	mov	r0, r6
 8001924:	f000 fb5a 	bl	8001fdc <__swsetup_r>
 8001928:	b1c0      	cbz	r0, 800195c <_vfiprintf_r+0x78>
 800192a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800192c:	07dc      	lsls	r4, r3, #31
 800192e:	d50e      	bpl.n	800194e <_vfiprintf_r+0x6a>
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	b01d      	add	sp, #116	; 0x74
 8001936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800193a:	4b7b      	ldr	r3, [pc, #492]	; (8001b28 <_vfiprintf_r+0x244>)
 800193c:	429d      	cmp	r5, r3
 800193e:	d101      	bne.n	8001944 <_vfiprintf_r+0x60>
 8001940:	68b5      	ldr	r5, [r6, #8]
 8001942:	e7df      	b.n	8001904 <_vfiprintf_r+0x20>
 8001944:	4b79      	ldr	r3, [pc, #484]	; (8001b2c <_vfiprintf_r+0x248>)
 8001946:	429d      	cmp	r5, r3
 8001948:	bf08      	it	eq
 800194a:	68f5      	ldreq	r5, [r6, #12]
 800194c:	e7da      	b.n	8001904 <_vfiprintf_r+0x20>
 800194e:	89ab      	ldrh	r3, [r5, #12]
 8001950:	0598      	lsls	r0, r3, #22
 8001952:	d4ed      	bmi.n	8001930 <_vfiprintf_r+0x4c>
 8001954:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001956:	f7ff ff06 	bl	8001766 <__retarget_lock_release_recursive>
 800195a:	e7e9      	b.n	8001930 <_vfiprintf_r+0x4c>
 800195c:	2300      	movs	r3, #0
 800195e:	9309      	str	r3, [sp, #36]	; 0x24
 8001960:	2320      	movs	r3, #32
 8001962:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001966:	f8cd 800c 	str.w	r8, [sp, #12]
 800196a:	2330      	movs	r3, #48	; 0x30
 800196c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001b30 <_vfiprintf_r+0x24c>
 8001970:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001974:	f04f 0901 	mov.w	r9, #1
 8001978:	4623      	mov	r3, r4
 800197a:	469a      	mov	sl, r3
 800197c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001980:	b10a      	cbz	r2, 8001986 <_vfiprintf_r+0xa2>
 8001982:	2a25      	cmp	r2, #37	; 0x25
 8001984:	d1f9      	bne.n	800197a <_vfiprintf_r+0x96>
 8001986:	ebba 0b04 	subs.w	fp, sl, r4
 800198a:	d00b      	beq.n	80019a4 <_vfiprintf_r+0xc0>
 800198c:	465b      	mov	r3, fp
 800198e:	4622      	mov	r2, r4
 8001990:	4629      	mov	r1, r5
 8001992:	4630      	mov	r0, r6
 8001994:	f7ff ff93 	bl	80018be <__sfputs_r>
 8001998:	3001      	adds	r0, #1
 800199a:	f000 80aa 	beq.w	8001af2 <_vfiprintf_r+0x20e>
 800199e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80019a0:	445a      	add	r2, fp
 80019a2:	9209      	str	r2, [sp, #36]	; 0x24
 80019a4:	f89a 3000 	ldrb.w	r3, [sl]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 80a2 	beq.w	8001af2 <_vfiprintf_r+0x20e>
 80019ae:	2300      	movs	r3, #0
 80019b0:	f04f 32ff 	mov.w	r2, #4294967295
 80019b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80019b8:	f10a 0a01 	add.w	sl, sl, #1
 80019bc:	9304      	str	r3, [sp, #16]
 80019be:	9307      	str	r3, [sp, #28]
 80019c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80019c4:	931a      	str	r3, [sp, #104]	; 0x68
 80019c6:	4654      	mov	r4, sl
 80019c8:	2205      	movs	r2, #5
 80019ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019ce:	4858      	ldr	r0, [pc, #352]	; (8001b30 <_vfiprintf_r+0x24c>)
 80019d0:	f7fe fc0e 	bl	80001f0 <memchr>
 80019d4:	9a04      	ldr	r2, [sp, #16]
 80019d6:	b9d8      	cbnz	r0, 8001a10 <_vfiprintf_r+0x12c>
 80019d8:	06d1      	lsls	r1, r2, #27
 80019da:	bf44      	itt	mi
 80019dc:	2320      	movmi	r3, #32
 80019de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80019e2:	0713      	lsls	r3, r2, #28
 80019e4:	bf44      	itt	mi
 80019e6:	232b      	movmi	r3, #43	; 0x2b
 80019e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80019ec:	f89a 3000 	ldrb.w	r3, [sl]
 80019f0:	2b2a      	cmp	r3, #42	; 0x2a
 80019f2:	d015      	beq.n	8001a20 <_vfiprintf_r+0x13c>
 80019f4:	9a07      	ldr	r2, [sp, #28]
 80019f6:	4654      	mov	r4, sl
 80019f8:	2000      	movs	r0, #0
 80019fa:	f04f 0c0a 	mov.w	ip, #10
 80019fe:	4621      	mov	r1, r4
 8001a00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a04:	3b30      	subs	r3, #48	; 0x30
 8001a06:	2b09      	cmp	r3, #9
 8001a08:	d94e      	bls.n	8001aa8 <_vfiprintf_r+0x1c4>
 8001a0a:	b1b0      	cbz	r0, 8001a3a <_vfiprintf_r+0x156>
 8001a0c:	9207      	str	r2, [sp, #28]
 8001a0e:	e014      	b.n	8001a3a <_vfiprintf_r+0x156>
 8001a10:	eba0 0308 	sub.w	r3, r0, r8
 8001a14:	fa09 f303 	lsl.w	r3, r9, r3
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	9304      	str	r3, [sp, #16]
 8001a1c:	46a2      	mov	sl, r4
 8001a1e:	e7d2      	b.n	80019c6 <_vfiprintf_r+0xe2>
 8001a20:	9b03      	ldr	r3, [sp, #12]
 8001a22:	1d19      	adds	r1, r3, #4
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	9103      	str	r1, [sp, #12]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bfbb      	ittet	lt
 8001a2c:	425b      	neglt	r3, r3
 8001a2e:	f042 0202 	orrlt.w	r2, r2, #2
 8001a32:	9307      	strge	r3, [sp, #28]
 8001a34:	9307      	strlt	r3, [sp, #28]
 8001a36:	bfb8      	it	lt
 8001a38:	9204      	strlt	r2, [sp, #16]
 8001a3a:	7823      	ldrb	r3, [r4, #0]
 8001a3c:	2b2e      	cmp	r3, #46	; 0x2e
 8001a3e:	d10c      	bne.n	8001a5a <_vfiprintf_r+0x176>
 8001a40:	7863      	ldrb	r3, [r4, #1]
 8001a42:	2b2a      	cmp	r3, #42	; 0x2a
 8001a44:	d135      	bne.n	8001ab2 <_vfiprintf_r+0x1ce>
 8001a46:	9b03      	ldr	r3, [sp, #12]
 8001a48:	1d1a      	adds	r2, r3, #4
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	9203      	str	r2, [sp, #12]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	bfb8      	it	lt
 8001a52:	f04f 33ff 	movlt.w	r3, #4294967295
 8001a56:	3402      	adds	r4, #2
 8001a58:	9305      	str	r3, [sp, #20]
 8001a5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001b40 <_vfiprintf_r+0x25c>
 8001a5e:	7821      	ldrb	r1, [r4, #0]
 8001a60:	2203      	movs	r2, #3
 8001a62:	4650      	mov	r0, sl
 8001a64:	f7fe fbc4 	bl	80001f0 <memchr>
 8001a68:	b140      	cbz	r0, 8001a7c <_vfiprintf_r+0x198>
 8001a6a:	2340      	movs	r3, #64	; 0x40
 8001a6c:	eba0 000a 	sub.w	r0, r0, sl
 8001a70:	fa03 f000 	lsl.w	r0, r3, r0
 8001a74:	9b04      	ldr	r3, [sp, #16]
 8001a76:	4303      	orrs	r3, r0
 8001a78:	3401      	adds	r4, #1
 8001a7a:	9304      	str	r3, [sp, #16]
 8001a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a80:	482c      	ldr	r0, [pc, #176]	; (8001b34 <_vfiprintf_r+0x250>)
 8001a82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001a86:	2206      	movs	r2, #6
 8001a88:	f7fe fbb2 	bl	80001f0 <memchr>
 8001a8c:	2800      	cmp	r0, #0
 8001a8e:	d03f      	beq.n	8001b10 <_vfiprintf_r+0x22c>
 8001a90:	4b29      	ldr	r3, [pc, #164]	; (8001b38 <_vfiprintf_r+0x254>)
 8001a92:	bb1b      	cbnz	r3, 8001adc <_vfiprintf_r+0x1f8>
 8001a94:	9b03      	ldr	r3, [sp, #12]
 8001a96:	3307      	adds	r3, #7
 8001a98:	f023 0307 	bic.w	r3, r3, #7
 8001a9c:	3308      	adds	r3, #8
 8001a9e:	9303      	str	r3, [sp, #12]
 8001aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001aa2:	443b      	add	r3, r7
 8001aa4:	9309      	str	r3, [sp, #36]	; 0x24
 8001aa6:	e767      	b.n	8001978 <_vfiprintf_r+0x94>
 8001aa8:	fb0c 3202 	mla	r2, ip, r2, r3
 8001aac:	460c      	mov	r4, r1
 8001aae:	2001      	movs	r0, #1
 8001ab0:	e7a5      	b.n	80019fe <_vfiprintf_r+0x11a>
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	3401      	adds	r4, #1
 8001ab6:	9305      	str	r3, [sp, #20]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f04f 0c0a 	mov.w	ip, #10
 8001abe:	4620      	mov	r0, r4
 8001ac0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001ac4:	3a30      	subs	r2, #48	; 0x30
 8001ac6:	2a09      	cmp	r2, #9
 8001ac8:	d903      	bls.n	8001ad2 <_vfiprintf_r+0x1ee>
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0c5      	beq.n	8001a5a <_vfiprintf_r+0x176>
 8001ace:	9105      	str	r1, [sp, #20]
 8001ad0:	e7c3      	b.n	8001a5a <_vfiprintf_r+0x176>
 8001ad2:	fb0c 2101 	mla	r1, ip, r1, r2
 8001ad6:	4604      	mov	r4, r0
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e7f0      	b.n	8001abe <_vfiprintf_r+0x1da>
 8001adc:	ab03      	add	r3, sp, #12
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	462a      	mov	r2, r5
 8001ae2:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <_vfiprintf_r+0x258>)
 8001ae4:	a904      	add	r1, sp, #16
 8001ae6:	4630      	mov	r0, r6
 8001ae8:	f3af 8000 	nop.w
 8001aec:	4607      	mov	r7, r0
 8001aee:	1c78      	adds	r0, r7, #1
 8001af0:	d1d6      	bne.n	8001aa0 <_vfiprintf_r+0x1bc>
 8001af2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001af4:	07d9      	lsls	r1, r3, #31
 8001af6:	d405      	bmi.n	8001b04 <_vfiprintf_r+0x220>
 8001af8:	89ab      	ldrh	r3, [r5, #12]
 8001afa:	059a      	lsls	r2, r3, #22
 8001afc:	d402      	bmi.n	8001b04 <_vfiprintf_r+0x220>
 8001afe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001b00:	f7ff fe31 	bl	8001766 <__retarget_lock_release_recursive>
 8001b04:	89ab      	ldrh	r3, [r5, #12]
 8001b06:	065b      	lsls	r3, r3, #25
 8001b08:	f53f af12 	bmi.w	8001930 <_vfiprintf_r+0x4c>
 8001b0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001b0e:	e711      	b.n	8001934 <_vfiprintf_r+0x50>
 8001b10:	ab03      	add	r3, sp, #12
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	462a      	mov	r2, r5
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <_vfiprintf_r+0x258>)
 8001b18:	a904      	add	r1, sp, #16
 8001b1a:	4630      	mov	r0, r6
 8001b1c:	f000 f880 	bl	8001c20 <_printf_i>
 8001b20:	e7e4      	b.n	8001aec <_vfiprintf_r+0x208>
 8001b22:	bf00      	nop
 8001b24:	080024b0 	.word	0x080024b0
 8001b28:	080024d0 	.word	0x080024d0
 8001b2c:	08002490 	.word	0x08002490
 8001b30:	080024f0 	.word	0x080024f0
 8001b34:	080024fa 	.word	0x080024fa
 8001b38:	00000000 	.word	0x00000000
 8001b3c:	080018bf 	.word	0x080018bf
 8001b40:	080024f6 	.word	0x080024f6

08001b44 <_printf_common>:
 8001b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b48:	4616      	mov	r6, r2
 8001b4a:	4699      	mov	r9, r3
 8001b4c:	688a      	ldr	r2, [r1, #8]
 8001b4e:	690b      	ldr	r3, [r1, #16]
 8001b50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001b54:	4293      	cmp	r3, r2
 8001b56:	bfb8      	it	lt
 8001b58:	4613      	movlt	r3, r2
 8001b5a:	6033      	str	r3, [r6, #0]
 8001b5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001b60:	4607      	mov	r7, r0
 8001b62:	460c      	mov	r4, r1
 8001b64:	b10a      	cbz	r2, 8001b6a <_printf_common+0x26>
 8001b66:	3301      	adds	r3, #1
 8001b68:	6033      	str	r3, [r6, #0]
 8001b6a:	6823      	ldr	r3, [r4, #0]
 8001b6c:	0699      	lsls	r1, r3, #26
 8001b6e:	bf42      	ittt	mi
 8001b70:	6833      	ldrmi	r3, [r6, #0]
 8001b72:	3302      	addmi	r3, #2
 8001b74:	6033      	strmi	r3, [r6, #0]
 8001b76:	6825      	ldr	r5, [r4, #0]
 8001b78:	f015 0506 	ands.w	r5, r5, #6
 8001b7c:	d106      	bne.n	8001b8c <_printf_common+0x48>
 8001b7e:	f104 0a19 	add.w	sl, r4, #25
 8001b82:	68e3      	ldr	r3, [r4, #12]
 8001b84:	6832      	ldr	r2, [r6, #0]
 8001b86:	1a9b      	subs	r3, r3, r2
 8001b88:	42ab      	cmp	r3, r5
 8001b8a:	dc26      	bgt.n	8001bda <_printf_common+0x96>
 8001b8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001b90:	1e13      	subs	r3, r2, #0
 8001b92:	6822      	ldr	r2, [r4, #0]
 8001b94:	bf18      	it	ne
 8001b96:	2301      	movne	r3, #1
 8001b98:	0692      	lsls	r2, r2, #26
 8001b9a:	d42b      	bmi.n	8001bf4 <_printf_common+0xb0>
 8001b9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ba0:	4649      	mov	r1, r9
 8001ba2:	4638      	mov	r0, r7
 8001ba4:	47c0      	blx	r8
 8001ba6:	3001      	adds	r0, #1
 8001ba8:	d01e      	beq.n	8001be8 <_printf_common+0xa4>
 8001baa:	6823      	ldr	r3, [r4, #0]
 8001bac:	68e5      	ldr	r5, [r4, #12]
 8001bae:	6832      	ldr	r2, [r6, #0]
 8001bb0:	f003 0306 	and.w	r3, r3, #6
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	bf08      	it	eq
 8001bb8:	1aad      	subeq	r5, r5, r2
 8001bba:	68a3      	ldr	r3, [r4, #8]
 8001bbc:	6922      	ldr	r2, [r4, #16]
 8001bbe:	bf0c      	ite	eq
 8001bc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001bc4:	2500      	movne	r5, #0
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	bfc4      	itt	gt
 8001bca:	1a9b      	subgt	r3, r3, r2
 8001bcc:	18ed      	addgt	r5, r5, r3
 8001bce:	2600      	movs	r6, #0
 8001bd0:	341a      	adds	r4, #26
 8001bd2:	42b5      	cmp	r5, r6
 8001bd4:	d11a      	bne.n	8001c0c <_printf_common+0xc8>
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	e008      	b.n	8001bec <_printf_common+0xa8>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	4652      	mov	r2, sl
 8001bde:	4649      	mov	r1, r9
 8001be0:	4638      	mov	r0, r7
 8001be2:	47c0      	blx	r8
 8001be4:	3001      	adds	r0, #1
 8001be6:	d103      	bne.n	8001bf0 <_printf_common+0xac>
 8001be8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bf0:	3501      	adds	r5, #1
 8001bf2:	e7c6      	b.n	8001b82 <_printf_common+0x3e>
 8001bf4:	18e1      	adds	r1, r4, r3
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	2030      	movs	r0, #48	; 0x30
 8001bfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001bfe:	4422      	add	r2, r4
 8001c00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001c04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001c08:	3302      	adds	r3, #2
 8001c0a:	e7c7      	b.n	8001b9c <_printf_common+0x58>
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	4622      	mov	r2, r4
 8001c10:	4649      	mov	r1, r9
 8001c12:	4638      	mov	r0, r7
 8001c14:	47c0      	blx	r8
 8001c16:	3001      	adds	r0, #1
 8001c18:	d0e6      	beq.n	8001be8 <_printf_common+0xa4>
 8001c1a:	3601      	adds	r6, #1
 8001c1c:	e7d9      	b.n	8001bd2 <_printf_common+0x8e>
	...

08001c20 <_printf_i>:
 8001c20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c24:	7e0f      	ldrb	r7, [r1, #24]
 8001c26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001c28:	2f78      	cmp	r7, #120	; 0x78
 8001c2a:	4691      	mov	r9, r2
 8001c2c:	4680      	mov	r8, r0
 8001c2e:	460c      	mov	r4, r1
 8001c30:	469a      	mov	sl, r3
 8001c32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001c36:	d807      	bhi.n	8001c48 <_printf_i+0x28>
 8001c38:	2f62      	cmp	r7, #98	; 0x62
 8001c3a:	d80a      	bhi.n	8001c52 <_printf_i+0x32>
 8001c3c:	2f00      	cmp	r7, #0
 8001c3e:	f000 80d8 	beq.w	8001df2 <_printf_i+0x1d2>
 8001c42:	2f58      	cmp	r7, #88	; 0x58
 8001c44:	f000 80a3 	beq.w	8001d8e <_printf_i+0x16e>
 8001c48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001c50:	e03a      	b.n	8001cc8 <_printf_i+0xa8>
 8001c52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001c56:	2b15      	cmp	r3, #21
 8001c58:	d8f6      	bhi.n	8001c48 <_printf_i+0x28>
 8001c5a:	a101      	add	r1, pc, #4	; (adr r1, 8001c60 <_printf_i+0x40>)
 8001c5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001c60:	08001cb9 	.word	0x08001cb9
 8001c64:	08001ccd 	.word	0x08001ccd
 8001c68:	08001c49 	.word	0x08001c49
 8001c6c:	08001c49 	.word	0x08001c49
 8001c70:	08001c49 	.word	0x08001c49
 8001c74:	08001c49 	.word	0x08001c49
 8001c78:	08001ccd 	.word	0x08001ccd
 8001c7c:	08001c49 	.word	0x08001c49
 8001c80:	08001c49 	.word	0x08001c49
 8001c84:	08001c49 	.word	0x08001c49
 8001c88:	08001c49 	.word	0x08001c49
 8001c8c:	08001dd9 	.word	0x08001dd9
 8001c90:	08001cfd 	.word	0x08001cfd
 8001c94:	08001dbb 	.word	0x08001dbb
 8001c98:	08001c49 	.word	0x08001c49
 8001c9c:	08001c49 	.word	0x08001c49
 8001ca0:	08001dfb 	.word	0x08001dfb
 8001ca4:	08001c49 	.word	0x08001c49
 8001ca8:	08001cfd 	.word	0x08001cfd
 8001cac:	08001c49 	.word	0x08001c49
 8001cb0:	08001c49 	.word	0x08001c49
 8001cb4:	08001dc3 	.word	0x08001dc3
 8001cb8:	682b      	ldr	r3, [r5, #0]
 8001cba:	1d1a      	adds	r2, r3, #4
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	602a      	str	r2, [r5, #0]
 8001cc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001cc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0a3      	b.n	8001e14 <_printf_i+0x1f4>
 8001ccc:	6820      	ldr	r0, [r4, #0]
 8001cce:	6829      	ldr	r1, [r5, #0]
 8001cd0:	0606      	lsls	r6, r0, #24
 8001cd2:	f101 0304 	add.w	r3, r1, #4
 8001cd6:	d50a      	bpl.n	8001cee <_printf_i+0xce>
 8001cd8:	680e      	ldr	r6, [r1, #0]
 8001cda:	602b      	str	r3, [r5, #0]
 8001cdc:	2e00      	cmp	r6, #0
 8001cde:	da03      	bge.n	8001ce8 <_printf_i+0xc8>
 8001ce0:	232d      	movs	r3, #45	; 0x2d
 8001ce2:	4276      	negs	r6, r6
 8001ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ce8:	485e      	ldr	r0, [pc, #376]	; (8001e64 <_printf_i+0x244>)
 8001cea:	230a      	movs	r3, #10
 8001cec:	e019      	b.n	8001d22 <_printf_i+0x102>
 8001cee:	680e      	ldr	r6, [r1, #0]
 8001cf0:	602b      	str	r3, [r5, #0]
 8001cf2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001cf6:	bf18      	it	ne
 8001cf8:	b236      	sxthne	r6, r6
 8001cfa:	e7ef      	b.n	8001cdc <_printf_i+0xbc>
 8001cfc:	682b      	ldr	r3, [r5, #0]
 8001cfe:	6820      	ldr	r0, [r4, #0]
 8001d00:	1d19      	adds	r1, r3, #4
 8001d02:	6029      	str	r1, [r5, #0]
 8001d04:	0601      	lsls	r1, r0, #24
 8001d06:	d501      	bpl.n	8001d0c <_printf_i+0xec>
 8001d08:	681e      	ldr	r6, [r3, #0]
 8001d0a:	e002      	b.n	8001d12 <_printf_i+0xf2>
 8001d0c:	0646      	lsls	r6, r0, #25
 8001d0e:	d5fb      	bpl.n	8001d08 <_printf_i+0xe8>
 8001d10:	881e      	ldrh	r6, [r3, #0]
 8001d12:	4854      	ldr	r0, [pc, #336]	; (8001e64 <_printf_i+0x244>)
 8001d14:	2f6f      	cmp	r7, #111	; 0x6f
 8001d16:	bf0c      	ite	eq
 8001d18:	2308      	moveq	r3, #8
 8001d1a:	230a      	movne	r3, #10
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001d22:	6865      	ldr	r5, [r4, #4]
 8001d24:	60a5      	str	r5, [r4, #8]
 8001d26:	2d00      	cmp	r5, #0
 8001d28:	bfa2      	ittt	ge
 8001d2a:	6821      	ldrge	r1, [r4, #0]
 8001d2c:	f021 0104 	bicge.w	r1, r1, #4
 8001d30:	6021      	strge	r1, [r4, #0]
 8001d32:	b90e      	cbnz	r6, 8001d38 <_printf_i+0x118>
 8001d34:	2d00      	cmp	r5, #0
 8001d36:	d04d      	beq.n	8001dd4 <_printf_i+0x1b4>
 8001d38:	4615      	mov	r5, r2
 8001d3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8001d3e:	fb03 6711 	mls	r7, r3, r1, r6
 8001d42:	5dc7      	ldrb	r7, [r0, r7]
 8001d44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001d48:	4637      	mov	r7, r6
 8001d4a:	42bb      	cmp	r3, r7
 8001d4c:	460e      	mov	r6, r1
 8001d4e:	d9f4      	bls.n	8001d3a <_printf_i+0x11a>
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d10b      	bne.n	8001d6c <_printf_i+0x14c>
 8001d54:	6823      	ldr	r3, [r4, #0]
 8001d56:	07de      	lsls	r6, r3, #31
 8001d58:	d508      	bpl.n	8001d6c <_printf_i+0x14c>
 8001d5a:	6923      	ldr	r3, [r4, #16]
 8001d5c:	6861      	ldr	r1, [r4, #4]
 8001d5e:	4299      	cmp	r1, r3
 8001d60:	bfde      	ittt	le
 8001d62:	2330      	movle	r3, #48	; 0x30
 8001d64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001d68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001d6c:	1b52      	subs	r2, r2, r5
 8001d6e:	6122      	str	r2, [r4, #16]
 8001d70:	f8cd a000 	str.w	sl, [sp]
 8001d74:	464b      	mov	r3, r9
 8001d76:	aa03      	add	r2, sp, #12
 8001d78:	4621      	mov	r1, r4
 8001d7a:	4640      	mov	r0, r8
 8001d7c:	f7ff fee2 	bl	8001b44 <_printf_common>
 8001d80:	3001      	adds	r0, #1
 8001d82:	d14c      	bne.n	8001e1e <_printf_i+0x1fe>
 8001d84:	f04f 30ff 	mov.w	r0, #4294967295
 8001d88:	b004      	add	sp, #16
 8001d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d8e:	4835      	ldr	r0, [pc, #212]	; (8001e64 <_printf_i+0x244>)
 8001d90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001d94:	6829      	ldr	r1, [r5, #0]
 8001d96:	6823      	ldr	r3, [r4, #0]
 8001d98:	f851 6b04 	ldr.w	r6, [r1], #4
 8001d9c:	6029      	str	r1, [r5, #0]
 8001d9e:	061d      	lsls	r5, r3, #24
 8001da0:	d514      	bpl.n	8001dcc <_printf_i+0x1ac>
 8001da2:	07df      	lsls	r7, r3, #31
 8001da4:	bf44      	itt	mi
 8001da6:	f043 0320 	orrmi.w	r3, r3, #32
 8001daa:	6023      	strmi	r3, [r4, #0]
 8001dac:	b91e      	cbnz	r6, 8001db6 <_printf_i+0x196>
 8001dae:	6823      	ldr	r3, [r4, #0]
 8001db0:	f023 0320 	bic.w	r3, r3, #32
 8001db4:	6023      	str	r3, [r4, #0]
 8001db6:	2310      	movs	r3, #16
 8001db8:	e7b0      	b.n	8001d1c <_printf_i+0xfc>
 8001dba:	6823      	ldr	r3, [r4, #0]
 8001dbc:	f043 0320 	orr.w	r3, r3, #32
 8001dc0:	6023      	str	r3, [r4, #0]
 8001dc2:	2378      	movs	r3, #120	; 0x78
 8001dc4:	4828      	ldr	r0, [pc, #160]	; (8001e68 <_printf_i+0x248>)
 8001dc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001dca:	e7e3      	b.n	8001d94 <_printf_i+0x174>
 8001dcc:	0659      	lsls	r1, r3, #25
 8001dce:	bf48      	it	mi
 8001dd0:	b2b6      	uxthmi	r6, r6
 8001dd2:	e7e6      	b.n	8001da2 <_printf_i+0x182>
 8001dd4:	4615      	mov	r5, r2
 8001dd6:	e7bb      	b.n	8001d50 <_printf_i+0x130>
 8001dd8:	682b      	ldr	r3, [r5, #0]
 8001dda:	6826      	ldr	r6, [r4, #0]
 8001ddc:	6961      	ldr	r1, [r4, #20]
 8001dde:	1d18      	adds	r0, r3, #4
 8001de0:	6028      	str	r0, [r5, #0]
 8001de2:	0635      	lsls	r5, r6, #24
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	d501      	bpl.n	8001dec <_printf_i+0x1cc>
 8001de8:	6019      	str	r1, [r3, #0]
 8001dea:	e002      	b.n	8001df2 <_printf_i+0x1d2>
 8001dec:	0670      	lsls	r0, r6, #25
 8001dee:	d5fb      	bpl.n	8001de8 <_printf_i+0x1c8>
 8001df0:	8019      	strh	r1, [r3, #0]
 8001df2:	2300      	movs	r3, #0
 8001df4:	6123      	str	r3, [r4, #16]
 8001df6:	4615      	mov	r5, r2
 8001df8:	e7ba      	b.n	8001d70 <_printf_i+0x150>
 8001dfa:	682b      	ldr	r3, [r5, #0]
 8001dfc:	1d1a      	adds	r2, r3, #4
 8001dfe:	602a      	str	r2, [r5, #0]
 8001e00:	681d      	ldr	r5, [r3, #0]
 8001e02:	6862      	ldr	r2, [r4, #4]
 8001e04:	2100      	movs	r1, #0
 8001e06:	4628      	mov	r0, r5
 8001e08:	f7fe f9f2 	bl	80001f0 <memchr>
 8001e0c:	b108      	cbz	r0, 8001e12 <_printf_i+0x1f2>
 8001e0e:	1b40      	subs	r0, r0, r5
 8001e10:	6060      	str	r0, [r4, #4]
 8001e12:	6863      	ldr	r3, [r4, #4]
 8001e14:	6123      	str	r3, [r4, #16]
 8001e16:	2300      	movs	r3, #0
 8001e18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e1c:	e7a8      	b.n	8001d70 <_printf_i+0x150>
 8001e1e:	6923      	ldr	r3, [r4, #16]
 8001e20:	462a      	mov	r2, r5
 8001e22:	4649      	mov	r1, r9
 8001e24:	4640      	mov	r0, r8
 8001e26:	47d0      	blx	sl
 8001e28:	3001      	adds	r0, #1
 8001e2a:	d0ab      	beq.n	8001d84 <_printf_i+0x164>
 8001e2c:	6823      	ldr	r3, [r4, #0]
 8001e2e:	079b      	lsls	r3, r3, #30
 8001e30:	d413      	bmi.n	8001e5a <_printf_i+0x23a>
 8001e32:	68e0      	ldr	r0, [r4, #12]
 8001e34:	9b03      	ldr	r3, [sp, #12]
 8001e36:	4298      	cmp	r0, r3
 8001e38:	bfb8      	it	lt
 8001e3a:	4618      	movlt	r0, r3
 8001e3c:	e7a4      	b.n	8001d88 <_printf_i+0x168>
 8001e3e:	2301      	movs	r3, #1
 8001e40:	4632      	mov	r2, r6
 8001e42:	4649      	mov	r1, r9
 8001e44:	4640      	mov	r0, r8
 8001e46:	47d0      	blx	sl
 8001e48:	3001      	adds	r0, #1
 8001e4a:	d09b      	beq.n	8001d84 <_printf_i+0x164>
 8001e4c:	3501      	adds	r5, #1
 8001e4e:	68e3      	ldr	r3, [r4, #12]
 8001e50:	9903      	ldr	r1, [sp, #12]
 8001e52:	1a5b      	subs	r3, r3, r1
 8001e54:	42ab      	cmp	r3, r5
 8001e56:	dcf2      	bgt.n	8001e3e <_printf_i+0x21e>
 8001e58:	e7eb      	b.n	8001e32 <_printf_i+0x212>
 8001e5a:	2500      	movs	r5, #0
 8001e5c:	f104 0619 	add.w	r6, r4, #25
 8001e60:	e7f5      	b.n	8001e4e <_printf_i+0x22e>
 8001e62:	bf00      	nop
 8001e64:	08002501 	.word	0x08002501
 8001e68:	08002512 	.word	0x08002512

08001e6c <_sbrk_r>:
 8001e6c:	b538      	push	{r3, r4, r5, lr}
 8001e6e:	4d06      	ldr	r5, [pc, #24]	; (8001e88 <_sbrk_r+0x1c>)
 8001e70:	2300      	movs	r3, #0
 8001e72:	4604      	mov	r4, r0
 8001e74:	4608      	mov	r0, r1
 8001e76:	602b      	str	r3, [r5, #0]
 8001e78:	f7ff fad4 	bl	8001424 <_sbrk>
 8001e7c:	1c43      	adds	r3, r0, #1
 8001e7e:	d102      	bne.n	8001e86 <_sbrk_r+0x1a>
 8001e80:	682b      	ldr	r3, [r5, #0]
 8001e82:	b103      	cbz	r3, 8001e86 <_sbrk_r+0x1a>
 8001e84:	6023      	str	r3, [r4, #0]
 8001e86:	bd38      	pop	{r3, r4, r5, pc}
 8001e88:	200000b8 	.word	0x200000b8

08001e8c <__sread>:
 8001e8c:	b510      	push	{r4, lr}
 8001e8e:	460c      	mov	r4, r1
 8001e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e94:	f000 fab2 	bl	80023fc <_read_r>
 8001e98:	2800      	cmp	r0, #0
 8001e9a:	bfab      	itete	ge
 8001e9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001e9e:	89a3      	ldrhlt	r3, [r4, #12]
 8001ea0:	181b      	addge	r3, r3, r0
 8001ea2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001ea6:	bfac      	ite	ge
 8001ea8:	6563      	strge	r3, [r4, #84]	; 0x54
 8001eaa:	81a3      	strhlt	r3, [r4, #12]
 8001eac:	bd10      	pop	{r4, pc}

08001eae <__swrite>:
 8001eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001eb2:	461f      	mov	r7, r3
 8001eb4:	898b      	ldrh	r3, [r1, #12]
 8001eb6:	05db      	lsls	r3, r3, #23
 8001eb8:	4605      	mov	r5, r0
 8001eba:	460c      	mov	r4, r1
 8001ebc:	4616      	mov	r6, r2
 8001ebe:	d505      	bpl.n	8001ecc <__swrite+0x1e>
 8001ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f000 f9c8 	bl	800225c <_lseek_r>
 8001ecc:	89a3      	ldrh	r3, [r4, #12]
 8001ece:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ed2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ed6:	81a3      	strh	r3, [r4, #12]
 8001ed8:	4632      	mov	r2, r6
 8001eda:	463b      	mov	r3, r7
 8001edc:	4628      	mov	r0, r5
 8001ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001ee2:	f000 b869 	b.w	8001fb8 <_write_r>

08001ee6 <__sseek>:
 8001ee6:	b510      	push	{r4, lr}
 8001ee8:	460c      	mov	r4, r1
 8001eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001eee:	f000 f9b5 	bl	800225c <_lseek_r>
 8001ef2:	1c43      	adds	r3, r0, #1
 8001ef4:	89a3      	ldrh	r3, [r4, #12]
 8001ef6:	bf15      	itete	ne
 8001ef8:	6560      	strne	r0, [r4, #84]	; 0x54
 8001efa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001efe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001f02:	81a3      	strheq	r3, [r4, #12]
 8001f04:	bf18      	it	ne
 8001f06:	81a3      	strhne	r3, [r4, #12]
 8001f08:	bd10      	pop	{r4, pc}

08001f0a <__sclose>:
 8001f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f0e:	f000 b8d3 	b.w	80020b8 <_close_r>
	...

08001f14 <__swbuf_r>:
 8001f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f16:	460e      	mov	r6, r1
 8001f18:	4614      	mov	r4, r2
 8001f1a:	4605      	mov	r5, r0
 8001f1c:	b118      	cbz	r0, 8001f26 <__swbuf_r+0x12>
 8001f1e:	6983      	ldr	r3, [r0, #24]
 8001f20:	b90b      	cbnz	r3, 8001f26 <__swbuf_r+0x12>
 8001f22:	f7ff fb81 	bl	8001628 <__sinit>
 8001f26:	4b21      	ldr	r3, [pc, #132]	; (8001fac <__swbuf_r+0x98>)
 8001f28:	429c      	cmp	r4, r3
 8001f2a:	d12b      	bne.n	8001f84 <__swbuf_r+0x70>
 8001f2c:	686c      	ldr	r4, [r5, #4]
 8001f2e:	69a3      	ldr	r3, [r4, #24]
 8001f30:	60a3      	str	r3, [r4, #8]
 8001f32:	89a3      	ldrh	r3, [r4, #12]
 8001f34:	071a      	lsls	r2, r3, #28
 8001f36:	d52f      	bpl.n	8001f98 <__swbuf_r+0x84>
 8001f38:	6923      	ldr	r3, [r4, #16]
 8001f3a:	b36b      	cbz	r3, 8001f98 <__swbuf_r+0x84>
 8001f3c:	6923      	ldr	r3, [r4, #16]
 8001f3e:	6820      	ldr	r0, [r4, #0]
 8001f40:	1ac0      	subs	r0, r0, r3
 8001f42:	6963      	ldr	r3, [r4, #20]
 8001f44:	b2f6      	uxtb	r6, r6
 8001f46:	4283      	cmp	r3, r0
 8001f48:	4637      	mov	r7, r6
 8001f4a:	dc04      	bgt.n	8001f56 <__swbuf_r+0x42>
 8001f4c:	4621      	mov	r1, r4
 8001f4e:	4628      	mov	r0, r5
 8001f50:	f000 f948 	bl	80021e4 <_fflush_r>
 8001f54:	bb30      	cbnz	r0, 8001fa4 <__swbuf_r+0x90>
 8001f56:	68a3      	ldr	r3, [r4, #8]
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	60a3      	str	r3, [r4, #8]
 8001f5c:	6823      	ldr	r3, [r4, #0]
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	6022      	str	r2, [r4, #0]
 8001f62:	701e      	strb	r6, [r3, #0]
 8001f64:	6963      	ldr	r3, [r4, #20]
 8001f66:	3001      	adds	r0, #1
 8001f68:	4283      	cmp	r3, r0
 8001f6a:	d004      	beq.n	8001f76 <__swbuf_r+0x62>
 8001f6c:	89a3      	ldrh	r3, [r4, #12]
 8001f6e:	07db      	lsls	r3, r3, #31
 8001f70:	d506      	bpl.n	8001f80 <__swbuf_r+0x6c>
 8001f72:	2e0a      	cmp	r6, #10
 8001f74:	d104      	bne.n	8001f80 <__swbuf_r+0x6c>
 8001f76:	4621      	mov	r1, r4
 8001f78:	4628      	mov	r0, r5
 8001f7a:	f000 f933 	bl	80021e4 <_fflush_r>
 8001f7e:	b988      	cbnz	r0, 8001fa4 <__swbuf_r+0x90>
 8001f80:	4638      	mov	r0, r7
 8001f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f84:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <__swbuf_r+0x9c>)
 8001f86:	429c      	cmp	r4, r3
 8001f88:	d101      	bne.n	8001f8e <__swbuf_r+0x7a>
 8001f8a:	68ac      	ldr	r4, [r5, #8]
 8001f8c:	e7cf      	b.n	8001f2e <__swbuf_r+0x1a>
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <__swbuf_r+0xa0>)
 8001f90:	429c      	cmp	r4, r3
 8001f92:	bf08      	it	eq
 8001f94:	68ec      	ldreq	r4, [r5, #12]
 8001f96:	e7ca      	b.n	8001f2e <__swbuf_r+0x1a>
 8001f98:	4621      	mov	r1, r4
 8001f9a:	4628      	mov	r0, r5
 8001f9c:	f000 f81e 	bl	8001fdc <__swsetup_r>
 8001fa0:	2800      	cmp	r0, #0
 8001fa2:	d0cb      	beq.n	8001f3c <__swbuf_r+0x28>
 8001fa4:	f04f 37ff 	mov.w	r7, #4294967295
 8001fa8:	e7ea      	b.n	8001f80 <__swbuf_r+0x6c>
 8001faa:	bf00      	nop
 8001fac:	080024b0 	.word	0x080024b0
 8001fb0:	080024d0 	.word	0x080024d0
 8001fb4:	08002490 	.word	0x08002490

08001fb8 <_write_r>:
 8001fb8:	b538      	push	{r3, r4, r5, lr}
 8001fba:	4d07      	ldr	r5, [pc, #28]	; (8001fd8 <_write_r+0x20>)
 8001fbc:	4604      	mov	r4, r0
 8001fbe:	4608      	mov	r0, r1
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	602a      	str	r2, [r5, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	f7ff f9db 	bl	8001382 <_write>
 8001fcc:	1c43      	adds	r3, r0, #1
 8001fce:	d102      	bne.n	8001fd6 <_write_r+0x1e>
 8001fd0:	682b      	ldr	r3, [r5, #0]
 8001fd2:	b103      	cbz	r3, 8001fd6 <_write_r+0x1e>
 8001fd4:	6023      	str	r3, [r4, #0]
 8001fd6:	bd38      	pop	{r3, r4, r5, pc}
 8001fd8:	200000b8 	.word	0x200000b8

08001fdc <__swsetup_r>:
 8001fdc:	4b32      	ldr	r3, [pc, #200]	; (80020a8 <__swsetup_r+0xcc>)
 8001fde:	b570      	push	{r4, r5, r6, lr}
 8001fe0:	681d      	ldr	r5, [r3, #0]
 8001fe2:	4606      	mov	r6, r0
 8001fe4:	460c      	mov	r4, r1
 8001fe6:	b125      	cbz	r5, 8001ff2 <__swsetup_r+0x16>
 8001fe8:	69ab      	ldr	r3, [r5, #24]
 8001fea:	b913      	cbnz	r3, 8001ff2 <__swsetup_r+0x16>
 8001fec:	4628      	mov	r0, r5
 8001fee:	f7ff fb1b 	bl	8001628 <__sinit>
 8001ff2:	4b2e      	ldr	r3, [pc, #184]	; (80020ac <__swsetup_r+0xd0>)
 8001ff4:	429c      	cmp	r4, r3
 8001ff6:	d10f      	bne.n	8002018 <__swsetup_r+0x3c>
 8001ff8:	686c      	ldr	r4, [r5, #4]
 8001ffa:	89a3      	ldrh	r3, [r4, #12]
 8001ffc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002000:	0719      	lsls	r1, r3, #28
 8002002:	d42c      	bmi.n	800205e <__swsetup_r+0x82>
 8002004:	06dd      	lsls	r5, r3, #27
 8002006:	d411      	bmi.n	800202c <__swsetup_r+0x50>
 8002008:	2309      	movs	r3, #9
 800200a:	6033      	str	r3, [r6, #0]
 800200c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002010:	81a3      	strh	r3, [r4, #12]
 8002012:	f04f 30ff 	mov.w	r0, #4294967295
 8002016:	e03e      	b.n	8002096 <__swsetup_r+0xba>
 8002018:	4b25      	ldr	r3, [pc, #148]	; (80020b0 <__swsetup_r+0xd4>)
 800201a:	429c      	cmp	r4, r3
 800201c:	d101      	bne.n	8002022 <__swsetup_r+0x46>
 800201e:	68ac      	ldr	r4, [r5, #8]
 8002020:	e7eb      	b.n	8001ffa <__swsetup_r+0x1e>
 8002022:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <__swsetup_r+0xd8>)
 8002024:	429c      	cmp	r4, r3
 8002026:	bf08      	it	eq
 8002028:	68ec      	ldreq	r4, [r5, #12]
 800202a:	e7e6      	b.n	8001ffa <__swsetup_r+0x1e>
 800202c:	0758      	lsls	r0, r3, #29
 800202e:	d512      	bpl.n	8002056 <__swsetup_r+0x7a>
 8002030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002032:	b141      	cbz	r1, 8002046 <__swsetup_r+0x6a>
 8002034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002038:	4299      	cmp	r1, r3
 800203a:	d002      	beq.n	8002042 <__swsetup_r+0x66>
 800203c:	4630      	mov	r0, r6
 800203e:	f000 f991 	bl	8002364 <_free_r>
 8002042:	2300      	movs	r3, #0
 8002044:	6363      	str	r3, [r4, #52]	; 0x34
 8002046:	89a3      	ldrh	r3, [r4, #12]
 8002048:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800204c:	81a3      	strh	r3, [r4, #12]
 800204e:	2300      	movs	r3, #0
 8002050:	6063      	str	r3, [r4, #4]
 8002052:	6923      	ldr	r3, [r4, #16]
 8002054:	6023      	str	r3, [r4, #0]
 8002056:	89a3      	ldrh	r3, [r4, #12]
 8002058:	f043 0308 	orr.w	r3, r3, #8
 800205c:	81a3      	strh	r3, [r4, #12]
 800205e:	6923      	ldr	r3, [r4, #16]
 8002060:	b94b      	cbnz	r3, 8002076 <__swsetup_r+0x9a>
 8002062:	89a3      	ldrh	r3, [r4, #12]
 8002064:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800206c:	d003      	beq.n	8002076 <__swsetup_r+0x9a>
 800206e:	4621      	mov	r1, r4
 8002070:	4630      	mov	r0, r6
 8002072:	f000 f92b 	bl	80022cc <__smakebuf_r>
 8002076:	89a0      	ldrh	r0, [r4, #12]
 8002078:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800207c:	f010 0301 	ands.w	r3, r0, #1
 8002080:	d00a      	beq.n	8002098 <__swsetup_r+0xbc>
 8002082:	2300      	movs	r3, #0
 8002084:	60a3      	str	r3, [r4, #8]
 8002086:	6963      	ldr	r3, [r4, #20]
 8002088:	425b      	negs	r3, r3
 800208a:	61a3      	str	r3, [r4, #24]
 800208c:	6923      	ldr	r3, [r4, #16]
 800208e:	b943      	cbnz	r3, 80020a2 <__swsetup_r+0xc6>
 8002090:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002094:	d1ba      	bne.n	800200c <__swsetup_r+0x30>
 8002096:	bd70      	pop	{r4, r5, r6, pc}
 8002098:	0781      	lsls	r1, r0, #30
 800209a:	bf58      	it	pl
 800209c:	6963      	ldrpl	r3, [r4, #20]
 800209e:	60a3      	str	r3, [r4, #8]
 80020a0:	e7f4      	b.n	800208c <__swsetup_r+0xb0>
 80020a2:	2000      	movs	r0, #0
 80020a4:	e7f7      	b.n	8002096 <__swsetup_r+0xba>
 80020a6:	bf00      	nop
 80020a8:	20000004 	.word	0x20000004
 80020ac:	080024b0 	.word	0x080024b0
 80020b0:	080024d0 	.word	0x080024d0
 80020b4:	08002490 	.word	0x08002490

080020b8 <_close_r>:
 80020b8:	b538      	push	{r3, r4, r5, lr}
 80020ba:	4d06      	ldr	r5, [pc, #24]	; (80020d4 <_close_r+0x1c>)
 80020bc:	2300      	movs	r3, #0
 80020be:	4604      	mov	r4, r0
 80020c0:	4608      	mov	r0, r1
 80020c2:	602b      	str	r3, [r5, #0]
 80020c4:	f7ff f979 	bl	80013ba <_close>
 80020c8:	1c43      	adds	r3, r0, #1
 80020ca:	d102      	bne.n	80020d2 <_close_r+0x1a>
 80020cc:	682b      	ldr	r3, [r5, #0]
 80020ce:	b103      	cbz	r3, 80020d2 <_close_r+0x1a>
 80020d0:	6023      	str	r3, [r4, #0]
 80020d2:	bd38      	pop	{r3, r4, r5, pc}
 80020d4:	200000b8 	.word	0x200000b8

080020d8 <__sflush_r>:
 80020d8:	898a      	ldrh	r2, [r1, #12]
 80020da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020de:	4605      	mov	r5, r0
 80020e0:	0710      	lsls	r0, r2, #28
 80020e2:	460c      	mov	r4, r1
 80020e4:	d458      	bmi.n	8002198 <__sflush_r+0xc0>
 80020e6:	684b      	ldr	r3, [r1, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	dc05      	bgt.n	80020f8 <__sflush_r+0x20>
 80020ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	dc02      	bgt.n	80020f8 <__sflush_r+0x20>
 80020f2:	2000      	movs	r0, #0
 80020f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80020fa:	2e00      	cmp	r6, #0
 80020fc:	d0f9      	beq.n	80020f2 <__sflush_r+0x1a>
 80020fe:	2300      	movs	r3, #0
 8002100:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002104:	682f      	ldr	r7, [r5, #0]
 8002106:	602b      	str	r3, [r5, #0]
 8002108:	d032      	beq.n	8002170 <__sflush_r+0x98>
 800210a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800210c:	89a3      	ldrh	r3, [r4, #12]
 800210e:	075a      	lsls	r2, r3, #29
 8002110:	d505      	bpl.n	800211e <__sflush_r+0x46>
 8002112:	6863      	ldr	r3, [r4, #4]
 8002114:	1ac0      	subs	r0, r0, r3
 8002116:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002118:	b10b      	cbz	r3, 800211e <__sflush_r+0x46>
 800211a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800211c:	1ac0      	subs	r0, r0, r3
 800211e:	2300      	movs	r3, #0
 8002120:	4602      	mov	r2, r0
 8002122:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002124:	6a21      	ldr	r1, [r4, #32]
 8002126:	4628      	mov	r0, r5
 8002128:	47b0      	blx	r6
 800212a:	1c43      	adds	r3, r0, #1
 800212c:	89a3      	ldrh	r3, [r4, #12]
 800212e:	d106      	bne.n	800213e <__sflush_r+0x66>
 8002130:	6829      	ldr	r1, [r5, #0]
 8002132:	291d      	cmp	r1, #29
 8002134:	d82c      	bhi.n	8002190 <__sflush_r+0xb8>
 8002136:	4a2a      	ldr	r2, [pc, #168]	; (80021e0 <__sflush_r+0x108>)
 8002138:	40ca      	lsrs	r2, r1
 800213a:	07d6      	lsls	r6, r2, #31
 800213c:	d528      	bpl.n	8002190 <__sflush_r+0xb8>
 800213e:	2200      	movs	r2, #0
 8002140:	6062      	str	r2, [r4, #4]
 8002142:	04d9      	lsls	r1, r3, #19
 8002144:	6922      	ldr	r2, [r4, #16]
 8002146:	6022      	str	r2, [r4, #0]
 8002148:	d504      	bpl.n	8002154 <__sflush_r+0x7c>
 800214a:	1c42      	adds	r2, r0, #1
 800214c:	d101      	bne.n	8002152 <__sflush_r+0x7a>
 800214e:	682b      	ldr	r3, [r5, #0]
 8002150:	b903      	cbnz	r3, 8002154 <__sflush_r+0x7c>
 8002152:	6560      	str	r0, [r4, #84]	; 0x54
 8002154:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002156:	602f      	str	r7, [r5, #0]
 8002158:	2900      	cmp	r1, #0
 800215a:	d0ca      	beq.n	80020f2 <__sflush_r+0x1a>
 800215c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002160:	4299      	cmp	r1, r3
 8002162:	d002      	beq.n	800216a <__sflush_r+0x92>
 8002164:	4628      	mov	r0, r5
 8002166:	f000 f8fd 	bl	8002364 <_free_r>
 800216a:	2000      	movs	r0, #0
 800216c:	6360      	str	r0, [r4, #52]	; 0x34
 800216e:	e7c1      	b.n	80020f4 <__sflush_r+0x1c>
 8002170:	6a21      	ldr	r1, [r4, #32]
 8002172:	2301      	movs	r3, #1
 8002174:	4628      	mov	r0, r5
 8002176:	47b0      	blx	r6
 8002178:	1c41      	adds	r1, r0, #1
 800217a:	d1c7      	bne.n	800210c <__sflush_r+0x34>
 800217c:	682b      	ldr	r3, [r5, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0c4      	beq.n	800210c <__sflush_r+0x34>
 8002182:	2b1d      	cmp	r3, #29
 8002184:	d001      	beq.n	800218a <__sflush_r+0xb2>
 8002186:	2b16      	cmp	r3, #22
 8002188:	d101      	bne.n	800218e <__sflush_r+0xb6>
 800218a:	602f      	str	r7, [r5, #0]
 800218c:	e7b1      	b.n	80020f2 <__sflush_r+0x1a>
 800218e:	89a3      	ldrh	r3, [r4, #12]
 8002190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002194:	81a3      	strh	r3, [r4, #12]
 8002196:	e7ad      	b.n	80020f4 <__sflush_r+0x1c>
 8002198:	690f      	ldr	r7, [r1, #16]
 800219a:	2f00      	cmp	r7, #0
 800219c:	d0a9      	beq.n	80020f2 <__sflush_r+0x1a>
 800219e:	0793      	lsls	r3, r2, #30
 80021a0:	680e      	ldr	r6, [r1, #0]
 80021a2:	bf08      	it	eq
 80021a4:	694b      	ldreq	r3, [r1, #20]
 80021a6:	600f      	str	r7, [r1, #0]
 80021a8:	bf18      	it	ne
 80021aa:	2300      	movne	r3, #0
 80021ac:	eba6 0807 	sub.w	r8, r6, r7
 80021b0:	608b      	str	r3, [r1, #8]
 80021b2:	f1b8 0f00 	cmp.w	r8, #0
 80021b6:	dd9c      	ble.n	80020f2 <__sflush_r+0x1a>
 80021b8:	6a21      	ldr	r1, [r4, #32]
 80021ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80021bc:	4643      	mov	r3, r8
 80021be:	463a      	mov	r2, r7
 80021c0:	4628      	mov	r0, r5
 80021c2:	47b0      	blx	r6
 80021c4:	2800      	cmp	r0, #0
 80021c6:	dc06      	bgt.n	80021d6 <__sflush_r+0xfe>
 80021c8:	89a3      	ldrh	r3, [r4, #12]
 80021ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021ce:	81a3      	strh	r3, [r4, #12]
 80021d0:	f04f 30ff 	mov.w	r0, #4294967295
 80021d4:	e78e      	b.n	80020f4 <__sflush_r+0x1c>
 80021d6:	4407      	add	r7, r0
 80021d8:	eba8 0800 	sub.w	r8, r8, r0
 80021dc:	e7e9      	b.n	80021b2 <__sflush_r+0xda>
 80021de:	bf00      	nop
 80021e0:	20400001 	.word	0x20400001

080021e4 <_fflush_r>:
 80021e4:	b538      	push	{r3, r4, r5, lr}
 80021e6:	690b      	ldr	r3, [r1, #16]
 80021e8:	4605      	mov	r5, r0
 80021ea:	460c      	mov	r4, r1
 80021ec:	b913      	cbnz	r3, 80021f4 <_fflush_r+0x10>
 80021ee:	2500      	movs	r5, #0
 80021f0:	4628      	mov	r0, r5
 80021f2:	bd38      	pop	{r3, r4, r5, pc}
 80021f4:	b118      	cbz	r0, 80021fe <_fflush_r+0x1a>
 80021f6:	6983      	ldr	r3, [r0, #24]
 80021f8:	b90b      	cbnz	r3, 80021fe <_fflush_r+0x1a>
 80021fa:	f7ff fa15 	bl	8001628 <__sinit>
 80021fe:	4b14      	ldr	r3, [pc, #80]	; (8002250 <_fflush_r+0x6c>)
 8002200:	429c      	cmp	r4, r3
 8002202:	d11b      	bne.n	800223c <_fflush_r+0x58>
 8002204:	686c      	ldr	r4, [r5, #4]
 8002206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0ef      	beq.n	80021ee <_fflush_r+0xa>
 800220e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002210:	07d0      	lsls	r0, r2, #31
 8002212:	d404      	bmi.n	800221e <_fflush_r+0x3a>
 8002214:	0599      	lsls	r1, r3, #22
 8002216:	d402      	bmi.n	800221e <_fflush_r+0x3a>
 8002218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800221a:	f7ff faa3 	bl	8001764 <__retarget_lock_acquire_recursive>
 800221e:	4628      	mov	r0, r5
 8002220:	4621      	mov	r1, r4
 8002222:	f7ff ff59 	bl	80020d8 <__sflush_r>
 8002226:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002228:	07da      	lsls	r2, r3, #31
 800222a:	4605      	mov	r5, r0
 800222c:	d4e0      	bmi.n	80021f0 <_fflush_r+0xc>
 800222e:	89a3      	ldrh	r3, [r4, #12]
 8002230:	059b      	lsls	r3, r3, #22
 8002232:	d4dd      	bmi.n	80021f0 <_fflush_r+0xc>
 8002234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002236:	f7ff fa96 	bl	8001766 <__retarget_lock_release_recursive>
 800223a:	e7d9      	b.n	80021f0 <_fflush_r+0xc>
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <_fflush_r+0x70>)
 800223e:	429c      	cmp	r4, r3
 8002240:	d101      	bne.n	8002246 <_fflush_r+0x62>
 8002242:	68ac      	ldr	r4, [r5, #8]
 8002244:	e7df      	b.n	8002206 <_fflush_r+0x22>
 8002246:	4b04      	ldr	r3, [pc, #16]	; (8002258 <_fflush_r+0x74>)
 8002248:	429c      	cmp	r4, r3
 800224a:	bf08      	it	eq
 800224c:	68ec      	ldreq	r4, [r5, #12]
 800224e:	e7da      	b.n	8002206 <_fflush_r+0x22>
 8002250:	080024b0 	.word	0x080024b0
 8002254:	080024d0 	.word	0x080024d0
 8002258:	08002490 	.word	0x08002490

0800225c <_lseek_r>:
 800225c:	b538      	push	{r3, r4, r5, lr}
 800225e:	4d07      	ldr	r5, [pc, #28]	; (800227c <_lseek_r+0x20>)
 8002260:	4604      	mov	r4, r0
 8002262:	4608      	mov	r0, r1
 8002264:	4611      	mov	r1, r2
 8002266:	2200      	movs	r2, #0
 8002268:	602a      	str	r2, [r5, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	f7ff f8cc 	bl	8001408 <_lseek>
 8002270:	1c43      	adds	r3, r0, #1
 8002272:	d102      	bne.n	800227a <_lseek_r+0x1e>
 8002274:	682b      	ldr	r3, [r5, #0]
 8002276:	b103      	cbz	r3, 800227a <_lseek_r+0x1e>
 8002278:	6023      	str	r3, [r4, #0]
 800227a:	bd38      	pop	{r3, r4, r5, pc}
 800227c:	200000b8 	.word	0x200000b8

08002280 <__swhatbuf_r>:
 8002280:	b570      	push	{r4, r5, r6, lr}
 8002282:	460e      	mov	r6, r1
 8002284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002288:	2900      	cmp	r1, #0
 800228a:	b096      	sub	sp, #88	; 0x58
 800228c:	4614      	mov	r4, r2
 800228e:	461d      	mov	r5, r3
 8002290:	da08      	bge.n	80022a4 <__swhatbuf_r+0x24>
 8002292:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	602a      	str	r2, [r5, #0]
 800229a:	061a      	lsls	r2, r3, #24
 800229c:	d410      	bmi.n	80022c0 <__swhatbuf_r+0x40>
 800229e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022a2:	e00e      	b.n	80022c2 <__swhatbuf_r+0x42>
 80022a4:	466a      	mov	r2, sp
 80022a6:	f000 f8bb 	bl	8002420 <_fstat_r>
 80022aa:	2800      	cmp	r0, #0
 80022ac:	dbf1      	blt.n	8002292 <__swhatbuf_r+0x12>
 80022ae:	9a01      	ldr	r2, [sp, #4]
 80022b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80022b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80022b8:	425a      	negs	r2, r3
 80022ba:	415a      	adcs	r2, r3
 80022bc:	602a      	str	r2, [r5, #0]
 80022be:	e7ee      	b.n	800229e <__swhatbuf_r+0x1e>
 80022c0:	2340      	movs	r3, #64	; 0x40
 80022c2:	2000      	movs	r0, #0
 80022c4:	6023      	str	r3, [r4, #0]
 80022c6:	b016      	add	sp, #88	; 0x58
 80022c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080022cc <__smakebuf_r>:
 80022cc:	898b      	ldrh	r3, [r1, #12]
 80022ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80022d0:	079d      	lsls	r5, r3, #30
 80022d2:	4606      	mov	r6, r0
 80022d4:	460c      	mov	r4, r1
 80022d6:	d507      	bpl.n	80022e8 <__smakebuf_r+0x1c>
 80022d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80022dc:	6023      	str	r3, [r4, #0]
 80022de:	6123      	str	r3, [r4, #16]
 80022e0:	2301      	movs	r3, #1
 80022e2:	6163      	str	r3, [r4, #20]
 80022e4:	b002      	add	sp, #8
 80022e6:	bd70      	pop	{r4, r5, r6, pc}
 80022e8:	ab01      	add	r3, sp, #4
 80022ea:	466a      	mov	r2, sp
 80022ec:	f7ff ffc8 	bl	8002280 <__swhatbuf_r>
 80022f0:	9900      	ldr	r1, [sp, #0]
 80022f2:	4605      	mov	r5, r0
 80022f4:	4630      	mov	r0, r6
 80022f6:	f7ff fa57 	bl	80017a8 <_malloc_r>
 80022fa:	b948      	cbnz	r0, 8002310 <__smakebuf_r+0x44>
 80022fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002300:	059a      	lsls	r2, r3, #22
 8002302:	d4ef      	bmi.n	80022e4 <__smakebuf_r+0x18>
 8002304:	f023 0303 	bic.w	r3, r3, #3
 8002308:	f043 0302 	orr.w	r3, r3, #2
 800230c:	81a3      	strh	r3, [r4, #12]
 800230e:	e7e3      	b.n	80022d8 <__smakebuf_r+0xc>
 8002310:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <__smakebuf_r+0x7c>)
 8002312:	62b3      	str	r3, [r6, #40]	; 0x28
 8002314:	89a3      	ldrh	r3, [r4, #12]
 8002316:	6020      	str	r0, [r4, #0]
 8002318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800231c:	81a3      	strh	r3, [r4, #12]
 800231e:	9b00      	ldr	r3, [sp, #0]
 8002320:	6163      	str	r3, [r4, #20]
 8002322:	9b01      	ldr	r3, [sp, #4]
 8002324:	6120      	str	r0, [r4, #16]
 8002326:	b15b      	cbz	r3, 8002340 <__smakebuf_r+0x74>
 8002328:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800232c:	4630      	mov	r0, r6
 800232e:	f000 f889 	bl	8002444 <_isatty_r>
 8002332:	b128      	cbz	r0, 8002340 <__smakebuf_r+0x74>
 8002334:	89a3      	ldrh	r3, [r4, #12]
 8002336:	f023 0303 	bic.w	r3, r3, #3
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	81a3      	strh	r3, [r4, #12]
 8002340:	89a0      	ldrh	r0, [r4, #12]
 8002342:	4305      	orrs	r5, r0
 8002344:	81a5      	strh	r5, [r4, #12]
 8002346:	e7cd      	b.n	80022e4 <__smakebuf_r+0x18>
 8002348:	080015c1 	.word	0x080015c1

0800234c <__malloc_lock>:
 800234c:	4801      	ldr	r0, [pc, #4]	; (8002354 <__malloc_lock+0x8>)
 800234e:	f7ff ba09 	b.w	8001764 <__retarget_lock_acquire_recursive>
 8002352:	bf00      	nop
 8002354:	200000ac 	.word	0x200000ac

08002358 <__malloc_unlock>:
 8002358:	4801      	ldr	r0, [pc, #4]	; (8002360 <__malloc_unlock+0x8>)
 800235a:	f7ff ba04 	b.w	8001766 <__retarget_lock_release_recursive>
 800235e:	bf00      	nop
 8002360:	200000ac 	.word	0x200000ac

08002364 <_free_r>:
 8002364:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002366:	2900      	cmp	r1, #0
 8002368:	d044      	beq.n	80023f4 <_free_r+0x90>
 800236a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800236e:	9001      	str	r0, [sp, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	f1a1 0404 	sub.w	r4, r1, #4
 8002376:	bfb8      	it	lt
 8002378:	18e4      	addlt	r4, r4, r3
 800237a:	f7ff ffe7 	bl	800234c <__malloc_lock>
 800237e:	4a1e      	ldr	r2, [pc, #120]	; (80023f8 <_free_r+0x94>)
 8002380:	9801      	ldr	r0, [sp, #4]
 8002382:	6813      	ldr	r3, [r2, #0]
 8002384:	b933      	cbnz	r3, 8002394 <_free_r+0x30>
 8002386:	6063      	str	r3, [r4, #4]
 8002388:	6014      	str	r4, [r2, #0]
 800238a:	b003      	add	sp, #12
 800238c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002390:	f7ff bfe2 	b.w	8002358 <__malloc_unlock>
 8002394:	42a3      	cmp	r3, r4
 8002396:	d908      	bls.n	80023aa <_free_r+0x46>
 8002398:	6825      	ldr	r5, [r4, #0]
 800239a:	1961      	adds	r1, r4, r5
 800239c:	428b      	cmp	r3, r1
 800239e:	bf01      	itttt	eq
 80023a0:	6819      	ldreq	r1, [r3, #0]
 80023a2:	685b      	ldreq	r3, [r3, #4]
 80023a4:	1949      	addeq	r1, r1, r5
 80023a6:	6021      	streq	r1, [r4, #0]
 80023a8:	e7ed      	b.n	8002386 <_free_r+0x22>
 80023aa:	461a      	mov	r2, r3
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	b10b      	cbz	r3, 80023b4 <_free_r+0x50>
 80023b0:	42a3      	cmp	r3, r4
 80023b2:	d9fa      	bls.n	80023aa <_free_r+0x46>
 80023b4:	6811      	ldr	r1, [r2, #0]
 80023b6:	1855      	adds	r5, r2, r1
 80023b8:	42a5      	cmp	r5, r4
 80023ba:	d10b      	bne.n	80023d4 <_free_r+0x70>
 80023bc:	6824      	ldr	r4, [r4, #0]
 80023be:	4421      	add	r1, r4
 80023c0:	1854      	adds	r4, r2, r1
 80023c2:	42a3      	cmp	r3, r4
 80023c4:	6011      	str	r1, [r2, #0]
 80023c6:	d1e0      	bne.n	800238a <_free_r+0x26>
 80023c8:	681c      	ldr	r4, [r3, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	6053      	str	r3, [r2, #4]
 80023ce:	4421      	add	r1, r4
 80023d0:	6011      	str	r1, [r2, #0]
 80023d2:	e7da      	b.n	800238a <_free_r+0x26>
 80023d4:	d902      	bls.n	80023dc <_free_r+0x78>
 80023d6:	230c      	movs	r3, #12
 80023d8:	6003      	str	r3, [r0, #0]
 80023da:	e7d6      	b.n	800238a <_free_r+0x26>
 80023dc:	6825      	ldr	r5, [r4, #0]
 80023de:	1961      	adds	r1, r4, r5
 80023e0:	428b      	cmp	r3, r1
 80023e2:	bf04      	itt	eq
 80023e4:	6819      	ldreq	r1, [r3, #0]
 80023e6:	685b      	ldreq	r3, [r3, #4]
 80023e8:	6063      	str	r3, [r4, #4]
 80023ea:	bf04      	itt	eq
 80023ec:	1949      	addeq	r1, r1, r5
 80023ee:	6021      	streq	r1, [r4, #0]
 80023f0:	6054      	str	r4, [r2, #4]
 80023f2:	e7ca      	b.n	800238a <_free_r+0x26>
 80023f4:	b003      	add	sp, #12
 80023f6:	bd30      	pop	{r4, r5, pc}
 80023f8:	200000b0 	.word	0x200000b0

080023fc <_read_r>:
 80023fc:	b538      	push	{r3, r4, r5, lr}
 80023fe:	4d07      	ldr	r5, [pc, #28]	; (800241c <_read_r+0x20>)
 8002400:	4604      	mov	r4, r0
 8002402:	4608      	mov	r0, r1
 8002404:	4611      	mov	r1, r2
 8002406:	2200      	movs	r2, #0
 8002408:	602a      	str	r2, [r5, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	f7fe ff9c 	bl	8001348 <_read>
 8002410:	1c43      	adds	r3, r0, #1
 8002412:	d102      	bne.n	800241a <_read_r+0x1e>
 8002414:	682b      	ldr	r3, [r5, #0]
 8002416:	b103      	cbz	r3, 800241a <_read_r+0x1e>
 8002418:	6023      	str	r3, [r4, #0]
 800241a:	bd38      	pop	{r3, r4, r5, pc}
 800241c:	200000b8 	.word	0x200000b8

08002420 <_fstat_r>:
 8002420:	b538      	push	{r3, r4, r5, lr}
 8002422:	4d07      	ldr	r5, [pc, #28]	; (8002440 <_fstat_r+0x20>)
 8002424:	2300      	movs	r3, #0
 8002426:	4604      	mov	r4, r0
 8002428:	4608      	mov	r0, r1
 800242a:	4611      	mov	r1, r2
 800242c:	602b      	str	r3, [r5, #0]
 800242e:	f7fe ffd0 	bl	80013d2 <_fstat>
 8002432:	1c43      	adds	r3, r0, #1
 8002434:	d102      	bne.n	800243c <_fstat_r+0x1c>
 8002436:	682b      	ldr	r3, [r5, #0]
 8002438:	b103      	cbz	r3, 800243c <_fstat_r+0x1c>
 800243a:	6023      	str	r3, [r4, #0]
 800243c:	bd38      	pop	{r3, r4, r5, pc}
 800243e:	bf00      	nop
 8002440:	200000b8 	.word	0x200000b8

08002444 <_isatty_r>:
 8002444:	b538      	push	{r3, r4, r5, lr}
 8002446:	4d06      	ldr	r5, [pc, #24]	; (8002460 <_isatty_r+0x1c>)
 8002448:	2300      	movs	r3, #0
 800244a:	4604      	mov	r4, r0
 800244c:	4608      	mov	r0, r1
 800244e:	602b      	str	r3, [r5, #0]
 8002450:	f7fe ffcf 	bl	80013f2 <_isatty>
 8002454:	1c43      	adds	r3, r0, #1
 8002456:	d102      	bne.n	800245e <_isatty_r+0x1a>
 8002458:	682b      	ldr	r3, [r5, #0]
 800245a:	b103      	cbz	r3, 800245e <_isatty_r+0x1a>
 800245c:	6023      	str	r3, [r4, #0]
 800245e:	bd38      	pop	{r3, r4, r5, pc}
 8002460:	200000b8 	.word	0x200000b8

08002464 <_init>:
 8002464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002466:	bf00      	nop
 8002468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800246a:	bc08      	pop	{r3}
 800246c:	469e      	mov	lr, r3
 800246e:	4770      	bx	lr

08002470 <_fini>:
 8002470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002472:	bf00      	nop
 8002474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002476:	bc08      	pop	{r3}
 8002478:	469e      	mov	lr, r3
 800247a:	4770      	bx	lr
